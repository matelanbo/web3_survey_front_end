{"ast":null,"code":"import { useRawCalls } from './useRawCalls';\n/**\n * Makes multiple calls to specific contracts and returns corresponding values. The hook will cause the component to refresh when values change.\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * @public\n * @deprecated It's recommended to use {@link useCalls} or {@link useRawCalls} instead.\n * @param calls list of calls, also see {@link RawCall}. Calls need to be in the same order across component renders.\n * @returns encoded result or Falsy value if call didn't return yet or an error occurred.\n */\n\nexport function useChainCalls(calls) {\n  const results = useRawCalls(calls);\n  return results.map(result => result === null || result === void 0 ? void 0 : result.value);\n}\n/**\n * Makes a call to a specific contract and returns its value. The hook will cause the component to refresh whenever a new block is mined and the value is changed.\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * @public\n * @deprecated It's recommended to use {@link useCall} or {@link useRawCall} instead.\n * @param call a single call, also see {@link RawCall}. A call can be `Falsy`, as it is important to keep the same ordering of hooks even if in a given render cycle there might be not enough information to perform a call.\n * @returns encoded result or Falsy value if call didn't return yet or an error occurred.\n */\n\nexport function useChainCall(call) {\n  return useChainCalls([call])[0];\n}","map":{"version":3,"mappings":"AAEA,SAASA,WAAT,QAA4B,eAA5B;AAEA;;;;;;;;;AAQA,OAAM,SAAUC,aAAV,CAAwBC,KAAxB,EAAkD;EACtD,MAAMC,OAAO,GAAGH,WAAW,CAACE,KAAD,CAA3B;EACA,OAAOC,OAAO,CAACC,GAAR,CAAaC,MAAD,IAAYA,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEC,KAAhC,CAAP;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAA4C;EAChD,OAAOP,aAAa,CAAC,CAACO,IAAD,CAAD,CAAb,CAAsB,CAAtB,CAAP;AACD","names":["useRawCalls","useChainCalls","calls","results","map","result","value","useChainCall","call"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/hooks/useChainCalls.ts"],"sourcesContent":["import { RawCall } from '../providers'\nimport { Falsy } from '../model/types'\nimport { useRawCalls } from './useRawCalls'\n\n/**\n * Makes multiple calls to specific contracts and returns corresponding values. The hook will cause the component to refresh when values change.\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * @public\n * @deprecated It's recommended to use {@link useCalls} or {@link useRawCalls} instead.\n * @param calls list of calls, also see {@link RawCall}. Calls need to be in the same order across component renders.\n * @returns encoded result or Falsy value if call didn't return yet or an error occurred.\n */\nexport function useChainCalls(calls: (RawCall | Falsy)[]) {\n  const results = useRawCalls(calls)\n  return results.map((result) => result?.value)\n}\n\n/**\n * Makes a call to a specific contract and returns its value. The hook will cause the component to refresh whenever a new block is mined and the value is changed.\n * Calls will be combined into a single multicall across all uses of {@link useChainCall}, {@link useChainCalls}, {@link useRawCall} and {@link useRawCalls}.\n * @public\n * @deprecated It's recommended to use {@link useCall} or {@link useRawCall} instead.\n * @param call a single call, also see {@link RawCall}. A call can be `Falsy`, as it is important to keep the same ordering of hooks even if in a given render cycle there might be not enough information to perform a call.\n * @returns encoded result or Falsy value if call didn't return yet or an error occurred.\n */\nexport function useChainCall(call: RawCall | Falsy) {\n  return useChainCalls([call])[0]\n}\n"]},"metadata":{},"sourceType":"module"}