{"ast":null,"code":"import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns a balance of a given token for a given address.\n * @param tokenAddress address of a token contract.\n * @param address address of an account.\n * @param queryParams see {@link QueryParams}.\n * @public\n * @returns a balance which is `BigNumber`, or `undefined` if address or token is `Falsy` or not connected.\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const { account } = useEthers()\n * const daiBalance = useTokenBalance(DAI_ADDRESS, account)\n *\n * return (\n *   {daiBalance && <p>Dai balance: {formatUnits(daiBalance, 18)} DAI</p>}\n * )\n */\n\nexport function useTokenBalance(tokenAddress, address) {\n  let queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a;\n\n  const {\n    value: tokenBalance\n  } = (_a = useCall(address && tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    method: 'balanceOf',\n    args: [address]\n  }, queryParams)) !== null && _a !== void 0 ? _a : {};\n  return tokenBalance === null || tokenBalance === void 0 ? void 0 : tokenBalance[0];\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAT,QAAyB,QAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAGA,SAASC,OAAT,QAAwB,WAAxB;AAEA;;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUC,eAAV,CACJC,YADI,EAEJC,OAFI,EAGyB;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;;;;EAE7B,MAAM;IAAEC,KAAK,EAAEC;EAAT,IACJ,aAAO,CACLH,OAAO,IACLD,YADF,IACkB;IACdK,QAAQ,EAAE,IAAIT,QAAJ,CAAaI,YAAb,EAA2BH,cAA3B,CADI;IAEdS,MAAM,EAAE,WAFM;IAGdC,IAAI,EAAE,CAACN,OAAD;EAHQ,CAFb,EAOLC,WAPK,CAAP,MAQC,IARD,IAQCM,aARD,GAQCA,EARD,GAQK,EATP;EAUA,OAAOJ,YAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAG,CAAH,CAAnB;AACD","names":["Contract","ERC20Interface","useCall","useTokenBalance","tokenAddress","address","queryParams","value","tokenBalance","contract","method","args","_a"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useTokenBalance.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { Contract } from 'ethers'\nimport { ERC20Interface } from '../constants'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { Falsy } from '../model/types'\nimport { useCall } from './useCall'\n\n/**\n * Returns a balance of a given token for a given address.\n * @param tokenAddress address of a token contract.\n * @param address address of an account.\n * @param queryParams see {@link QueryParams}.\n * @public\n * @returns a balance which is `BigNumber`, or `undefined` if address or token is `Falsy` or not connected.\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const { account } = useEthers()\n * const daiBalance = useTokenBalance(DAI_ADDRESS, account)\n *\n * return (\n *   {daiBalance && <p>Dai balance: {formatUnits(daiBalance, 18)} DAI</p>}\n * )\n */\nexport function useTokenBalance(\n  tokenAddress: string | Falsy,\n  address: string | Falsy,\n  queryParams: QueryParams = {}\n): BigNumber | undefined {\n  const { value: tokenBalance } =\n    useCall(\n      address &&\n        tokenAddress && {\n          contract: new Contract(tokenAddress, ERC20Interface),\n          method: 'balanceOf',\n          args: [address],\n        },\n      queryParams\n    ) ?? {}\n  return tokenBalance?.[0]\n}\n"]},"metadata":{},"sourceType":"module"}