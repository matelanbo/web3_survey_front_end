{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { BlockNumberContext } from './context';\nimport { blockNumberReducer } from '../common/reducer';\nimport { useDebounce, useEthers } from '../../../hooks';\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock';\nimport { useWindow } from '../../window';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function BlockNumberProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const [state, dispatch] = useReducer(blockNumberReducer, {});\n  const {\n    isActive\n  } = useWindow();\n  useEffect(() => subscribeToNewBlock(library, chainId, dispatch, isActive), [library, chainId, isActive]);\n  const debouncedState = useDebounce(state, 100);\n  const blockNumber = chainId !== undefined ? debouncedState[chainId] : undefined;\n  return _jsx(BlockNumberContext.Provider, {\n    value: blockNumber,\n    children: children\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,SAApB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,gBAAvC;AACA,SAASC,mBAAT,QAAoC,+BAApC;AACA,SAASC,SAAT,QAA0B,cAA1B;AAMA;;;;AAGA,OAAM,SAAUC,mBAAV,OAAiD;EAAA,IAAnB;IAAEC;EAAF,CAAmB;EACrD,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAuBN,SAAS,EAAtC;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBZ,UAAU,CAACE,kBAAD,EAAqB,EAArB,CAApC;EACA,MAAM;IAAEW;EAAF,IAAeP,SAAS,EAA9B;EAEAP,SAAS,CAAC,MAAMM,mBAAmB,CAACI,OAAD,EAAUC,OAAV,EAAmBE,QAAnB,EAA6BC,QAA7B,CAA1B,EAAkE,CAACJ,OAAD,EAAUC,OAAV,EAAmBG,QAAnB,CAAlE,CAAT;EAEA,MAAMC,cAAc,GAAGX,WAAW,CAACQ,KAAD,EAAQ,GAAR,CAAlC;EACA,MAAMI,WAAW,GAAGL,OAAO,KAAKM,SAAZ,GAAwBF,cAAc,CAACJ,OAAD,CAAtC,GAAkDM,SAAtE;EAEA,OAAOC,KAAChB,kBAAkB,CAACiB,QAApB,EAA4B;IAACC,KAAK,EAAEJ,WAAR;IAAqBP,QAAQ,EAAEA;EAA/B,CAA5B,CAAP;AACD","names":["useEffect","useReducer","BlockNumberContext","blockNumberReducer","useDebounce","useEthers","subscribeToNewBlock","useWindow","BlockNumberProvider","children","library","chainId","state","dispatch","isActive","debouncedState","blockNumber","undefined","_jsx","Provider","value"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/providers/blockNumber/blockNumber/provider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useReducer } from 'react'\nimport { BlockNumberContext } from './context'\nimport { blockNumberReducer } from '../common/reducer'\nimport { useDebounce, useEthers } from '../../../hooks'\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock'\nimport { useWindow } from '../../window'\n\ninterface Props {\n  children: ReactNode\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function BlockNumberProvider({ children }: Props) {\n  const { library, chainId } = useEthers()\n  const [state, dispatch] = useReducer(blockNumberReducer, {})\n  const { isActive } = useWindow()\n\n  useEffect(() => subscribeToNewBlock(library, chainId, dispatch, isActive), [library, chainId, isActive])\n\n  const debouncedState = useDebounce(state, 100)\n  const blockNumber = chainId !== undefined ? debouncedState[chainId] : undefined\n\n  return <BlockNumberContext.Provider value={blockNumber} children={children} />\n}\n"]},"metadata":{},"sourceType":"module"}