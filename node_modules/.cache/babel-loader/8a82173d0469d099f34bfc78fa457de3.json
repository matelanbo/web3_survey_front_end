{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS);\n  const {\n    chainId,\n    account\n  } = useEthers();\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  const addNotification = useCallback(_ref2 => {\n    let {\n      notification,\n      chainId\n    } = _ref2;\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      chainId,\n      notification: Object.assign(Object.assign({}, notification), {\n        id: nanoid()\n      })\n    });\n  }, [dispatch]);\n  const removeNotification = useCallback(_ref3 => {\n    let {\n      notificationId,\n      chainId\n    } = _ref3;\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      chainId,\n      notificationId\n    });\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification,\n      notifications,\n      removeNotification\n    },\n    children: children\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,WAApB,EAAiCC,SAAjC,EAA4CC,UAA5C,QAA8D,OAA9D;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,oBAAT,QAAqC,WAArC;AACA,SAAiCC,qBAAjC,QAAyF,SAAzF;AACA,SAASC,mBAAT,QAAoC,WAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAMA,OAAM,SAAUC,qBAAV,OAAmD;EAAA,IAAnB;IAAEC;EAAF,CAAmB;EACvD,MAAM,CAACC,aAAD,EAAgBC,QAAhB,IAA4BT,UAAU,CAACI,mBAAD,EAAsBD,qBAAtB,CAA5C;EACA,MAAM;IAAEO,OAAF;IAAWC;EAAX,IAAuBV,SAAS,EAAtC;EAEAF,SAAS,CAAC,MAAK;IACb,IAAIY,OAAO,IAAID,OAAf,EAAwB;MACtBD,QAAQ,CAAC;QACPG,IAAI,EAAE,kBADC;QAEPF,OAAO,EAAEA,OAFF;QAGPG,YAAY,EAAE;UACZD,IAAI,EAAE,iBADM;UAEZE,EAAE,EAAET,MAAM,EAFE;UAGZU,WAAW,EAAEC,IAAI,CAACC,GAAL,EAHD;UAIZC,OAAO,EAAEP;QAJG;MAHP,CAAD,CAAR;IAUD;EACF,CAbQ,EAaN,CAACA,OAAD,EAAUD,OAAV,CAbM,CAAT;EAeA,MAAMS,eAAe,GAAGrB,WAAW,CACjC,SAAsD;IAAA,IAArD;MAAEe,YAAF;MAAgBH;IAAhB,CAAqD;IACpDD,QAAQ,CAAC;MACPG,IAAI,EAAE,kBADC;MAEPF,OAFO;MAGPG,YAAY,kCAAOA,YAAP,GAAmB;QAAEC,EAAE,EAAET,MAAM;MAAZ,CAAnB;IAHL,CAAD,CAAR;EAKD,CAPgC,EAQjC,CAACI,QAAD,CARiC,CAAnC;EAWA,MAAMW,kBAAkB,GAAGtB,WAAW,CACpC,SAA2D;IAAA,IAA1D;MAAEuB,cAAF;MAAkBX;IAAlB,CAA0D;IACzDD,QAAQ,CAAC;MACPG,IAAI,EAAE,qBADC;MAEPF,OAFO;MAGPW;IAHO,CAAD,CAAR;EAKD,CAPmC,EAQpC,CAACZ,QAAD,CARoC,CAAtC;EAWA,OACEa,KAACpB,oBAAoB,CAACqB,QAAtB,EAA8B;IAACC,KAAK,EAAE;MAAEL,eAAF;MAAmBX,aAAnB;MAAkCY;IAAlC,CAAR;IAAgEb,QAAQ,EAAEA;EAA1E,CAA9B,CADF;AAGD","names":["useCallback","useEffect","useReducer","useEthers","NotificationsContext","DEFAULT_NOTIFICATIONS","notificationReducer","nanoid","NotificationsProvider","children","notifications","dispatch","chainId","account","type","notification","id","submittedAt","Date","now","address","addNotification","removeNotification","notificationId","_jsx","Provider","value"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/providers/notifications/provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer } from 'react'\nimport { useEthers } from '../../hooks'\nimport { NotificationsContext } from './context'\nimport { AddNotificationPayload, DEFAULT_NOTIFICATIONS, RemoveNotificationPayload } from './model'\nimport { notificationReducer } from './reducer'\nimport { nanoid } from 'nanoid'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function NotificationsProvider({ children }: Props) {\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS)\n  const { chainId, account } = useEthers()\n\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account,\n        },\n      })\n    }\n  }, [account, chainId])\n\n  const addNotification = useCallback(\n    ({ notification, chainId }: AddNotificationPayload) => {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId,\n        notification: { ...notification, id: nanoid() },\n      })\n    },\n    [dispatch]\n  )\n\n  const removeNotification = useCallback(\n    ({ notificationId, chainId }: RemoveNotificationPayload) => {\n      dispatch({\n        type: 'REMOVE_NOTIFICATION',\n        chainId,\n        notificationId,\n      })\n    },\n    [dispatch]\n  )\n\n  return (\n    <NotificationsContext.Provider value={{ addNotification, notifications, removeNotification }} children={children} />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}