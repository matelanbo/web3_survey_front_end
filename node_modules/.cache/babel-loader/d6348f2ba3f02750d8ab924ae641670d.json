{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { formatUnits } from \"@ethersproject/units\";\nexport const useQuestionsList = tokenAddress => {\n  _s();\n\n  // address\n  // abi\n  // chainId\n  const {\n    abi\n  } = MainRouter;\n  const {\n    account,\n    chainId\n  } = useEthers();\n  const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface); // Check Rewards\n\n  const results = [[0], [1], [2], [3]];\n  console.log(\"questionlist in\", account, tokenFarmAddress); //const { value: results } =\n  //    useCall({\n  //        contract: tokenFarmContract,\n  //        method: 'getQuestionsStatus',\n  //        args: []\n  //    }) ?? {}\n\n  console.log(\"out\");\n  const questionsList = [0]; //console.log(results)\n\n  const toShow = [];\n\n  for (var i = 0; i < questionsList.length; i++) {\n    const formattedAnswered = results[1][i] ? parseFloat(formatUnits(results[1][i], 0)) : 0;\n    const formattedMaxAnswers = results[2][i] ? parseFloat(formatUnits(results[2][i], 0)) : 0;\n    const formattedRewards = results[3][i] ? parseFloat(formatUnits(results[3][i], 18)) : 0;\n    toShow.push({\n      \"id\": i,\n      \"status\": results[0][i],\n      \"spots\": formattedAnswered,\n      \"maxAnswers\": formattedMaxAnswers,\n      \"rewards\": formattedRewards\n    });\n  }\n\n  return toShow; //   return [{ 'id': 0, 'status': 0, 'spots': 11, 'maxAnswers': 20 }, { 'id': 1, 'status': 0, 'spots': 11, 'maxAnswers': 20 }, { 'id': 2, 'status': 1, 'spots': 11, 'maxAnswers': 20 }]\n};\n\n_s(useQuestionsList, \"FPNriP0SSGsTwXbOSi4xVpvkj00=\", false, function () {\n  return [useEthers];\n});","map":{"version":3,"names":["useEthers","constants","utils","networkMapping","MainRouter","Contract","formatUnits","useQuestionsList","tokenAddress","abi","account","chainId","tokenFarmAddress","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","results","console","log","questionsList","toShow","i","length","formattedAnswered","parseFloat","formattedMaxAnswers","formattedRewards","push"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/src/hooks/useQuestionsList.tsx"],"sourcesContent":["import { useEthers, useCall } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nexport const useQuestionsList = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { abi } = MainRouter\n    const { account, chainId } = useEthers()\n    const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    // Check Rewards\n    const results = [[0], [1], [2], [3]]\n    console.log(\"questionlist in\", account, tokenFarmAddress)\n    //const { value: results } =\n    //    useCall({\n    //        contract: tokenFarmContract,\n    //        method: 'getQuestionsStatus',\n    //        args: []\n    //    }) ?? {}\n    console.log(\"out\")\n    const questionsList = [0]\n    //console.log(results)\n    const toShow = []\n    for (var i = 0; i < questionsList.length; i++) {\n        const formattedAnswered: number = results[1][i] ? parseFloat(formatUnits(results[1][i], 0)) : 0\n        const formattedMaxAnswers: number = results[2][i] ? parseFloat(formatUnits(results[2][i], 0)) : 0\n        const formattedRewards: number = results[3][i] ? parseFloat(formatUnits(results[3][i], 18)) : 0\n        toShow.push({ \"id\": i, \"status\": results[0][i], \"spots\": formattedAnswered, \"maxAnswers\": formattedMaxAnswers, \"rewards\": formattedRewards })\n    }\n    return toShow\n    //   return [{ 'id': 0, 'status': 0, 'spots': 11, 'maxAnswers': 20 }, { 'id': 1, 'status': 0, 'spots': 11, 'maxAnswers': 20 }, { 'id': 2, 'status': 1, 'spots': 11, 'maxAnswers': 20 }]\n}"],"mappings":";;AAAA,SAASA,SAAT,QAAmC,eAAnC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,YAAD,IAA0B;EAAA;;EACtD;EACA;EACA;EACA,MAAM;IAAEC;EAAF,IAAUL,UAAhB;EACA,MAAM;IAAEM,OAAF;IAAWC;EAAX,IAAuBX,SAAS,EAAtC;EACA,MAAMY,gBAAgB,GAAGD,OAAO,GAAGR,cAAc,CAAC,GAAD,CAAd,CAAoB,YAApB,EAAkC,CAAlC,CAAH,GAA0CF,SAAS,CAACY,WAApF;EACA,MAAMC,kBAAkB,GAAG,IAAIZ,KAAK,CAACa,SAAV,CAAoBN,GAApB,CAA3B;EACA,MAAMO,iBAAiB,GAAG,IAAIX,QAAJ,CAAaO,gBAAb,EAA+BE,kBAA/B,CAA1B,CARsD,CAUtD;;EACA,MAAMG,OAAO,GAAG,CAAC,CAAC,CAAD,CAAD,EAAM,CAAC,CAAD,CAAN,EAAW,CAAC,CAAD,CAAX,EAAgB,CAAC,CAAD,CAAhB,CAAhB;EACAC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BT,OAA/B,EAAwCE,gBAAxC,EAZsD,CAatD;EACA;EACA;EACA;EACA;EACA;;EACAM,OAAO,CAACC,GAAR,CAAY,KAAZ;EACA,MAAMC,aAAa,GAAG,CAAC,CAAD,CAAtB,CApBsD,CAqBtD;;EACA,MAAMC,MAAM,GAAG,EAAf;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;IAC3C,MAAME,iBAAyB,GAAGP,OAAO,CAAC,CAAD,CAAP,CAAWK,CAAX,IAAgBG,UAAU,CAACnB,WAAW,CAACW,OAAO,CAAC,CAAD,CAAP,CAAWK,CAAX,CAAD,EAAgB,CAAhB,CAAZ,CAA1B,GAA4D,CAA9F;IACA,MAAMI,mBAA2B,GAAGT,OAAO,CAAC,CAAD,CAAP,CAAWK,CAAX,IAAgBG,UAAU,CAACnB,WAAW,CAACW,OAAO,CAAC,CAAD,CAAP,CAAWK,CAAX,CAAD,EAAgB,CAAhB,CAAZ,CAA1B,GAA4D,CAAhG;IACA,MAAMK,gBAAwB,GAAGV,OAAO,CAAC,CAAD,CAAP,CAAWK,CAAX,IAAgBG,UAAU,CAACnB,WAAW,CAACW,OAAO,CAAC,CAAD,CAAP,CAAWK,CAAX,CAAD,EAAgB,EAAhB,CAAZ,CAA1B,GAA6D,CAA9F;IACAD,MAAM,CAACO,IAAP,CAAY;MAAE,MAAMN,CAAR;MAAW,UAAUL,OAAO,CAAC,CAAD,CAAP,CAAWK,CAAX,CAArB;MAAoC,SAASE,iBAA7C;MAAgE,cAAcE,mBAA9E;MAAmG,WAAWC;IAA9G,CAAZ;EACH;;EACD,OAAON,MAAP,CA7BsD,CA8BtD;AACH,CA/BM;;GAAMd,gB;UAKoBP,S"},"metadata":{},"sourceType":"module"}