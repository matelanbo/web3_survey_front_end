{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _a, _b, _c;\n\n  const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state; // merge with existing state\n\n      const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n\n      for (const [address, entries] of Object.entries(oldState)) {\n        newState = Object.assign(Object.assign({}, newState), {\n          [address]: Object.assign(Object.assign({}, entries), newState[address])\n        });\n      }\n\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: {\n          blockNumber: action.blockNumber,\n          state: newState\n        }\n      });\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), {\n          blockNumber: action.blockNumber,\n          error: action.error\n        })\n      });\n    }\n  }\n\n  return state;\n}","map":{"version":3,"mappings":"AAkCA;;;AAGA,OAAM,SAAUA,iBAAV,GAAuE;EAAA,IAA3CC,KAA2C,uEAA5B,EAA4B;EAAA,IAAxBC,MAAwB;;;;EAC3E,MAAMC,OAAO,GAAG,WAAK,CAACD,MAAM,CAACE,OAAR,CAAL,MAAqB,IAArB,IAAqBC,aAArB,GAAqB,MAArB,GAAqBA,GAAEC,WAAvC;;EACA,IAAI,CAACH,OAAD,IAAYD,MAAM,CAACI,WAAP,IAAsBH,OAAtC,EAA+C;IAC7C,IAAID,MAAM,CAACK,IAAP,KAAgB,eAApB,EAAqC;MACnC,IAAIC,QAAQ,GAAGN,MAAM,CAACD,KAAtB,CADmC,CAEnC;;MACA,MAAMQ,QAAQ,GAAG,iBAAK,CAACP,MAAM,CAACE,OAAR,CAAL,MAAqB,IAArB,IAAqBM,aAArB,GAAqB,MAArB,GAAqBA,GAAET,KAAvB,MAA4B,IAA5B,IAA4BU,aAA5B,GAA4BA,EAA5B,GAAgC,EAAjD;;MACA,KAAK,MAAM,CAACC,OAAD,EAAUC,OAAV,CAAX,IAAiCC,MAAM,CAACD,OAAP,CAAeJ,QAAf,CAAjC,EAA2D;QACzDD,QAAQ,mCACHA,QADG,GACK;UACX,CAACI,OAAD,GAASE,gCACJD,OADI,GAEJL,QAAQ,CAACI,OAAD,CAFJ;QADE,CADL,CAAR;MAOD;;MACD,uCACKX,KADL,GACU;QACR,CAACC,MAAM,CAACE,OAAR,GAAkB;UAAEE,WAAW,EAAEJ,MAAM,CAACI,WAAtB;UAAmCL,KAAK,EAAEO;QAA1C;MADV,CADV;IAID,CAjBD,MAiBO,IAAIN,MAAM,CAACK,IAAP,KAAgB,aAApB,EAAmC;MACxC,uCACKN,KADL,GACU;QACR,CAACC,MAAM,CAACE,OAAR,GAAgBU,gCAAOb,KAAK,CAACC,MAAM,CAACE,OAAR,CAAZ,GAA4B;UAAEE,WAAW,EAAEJ,MAAM,CAACI,WAAtB;UAAmCS,KAAK,EAAEb,MAAM,CAACa;QAAjD,CAA5B;MADR,CADV;IAID;EACF;;EACD,OAAOd,KAAP;AACD","names":["chainStateReducer","state","action","current","chainId","_a","blockNumber","type","newState","oldState","_b","_c","address","entries","Object","error"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/providers/chainState/common/chainStateReducer.ts"],"sourcesContent":["import { ChainState } from './model'\n\n/**\n * @public\n */\nexport interface State {\n  [chainId: number]:\n    | {\n        blockNumber: number\n        state?: ChainState\n        error?: unknown\n      }\n    | undefined\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport type ChainStateAction = FetchSuccess | FetchError\n\ninterface FetchSuccess {\n  type: 'FETCH_SUCCESS'\n  chainId: number\n  blockNumber: number\n  state: ChainState\n}\n\ninterface FetchError {\n  type: 'FETCH_ERROR'\n  chainId: number\n  blockNumber: number\n  error: unknown\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer(state: State = {}, action: ChainStateAction) {\n  const current = state[action.chainId]?.blockNumber\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state\n      // merge with existing state\n      const oldState = state[action.chainId]?.state ?? {}\n      for (const [address, entries] of Object.entries(oldState)) {\n        newState = {\n          ...newState,\n          [address]: {\n            ...entries,\n            ...newState[address],\n          },\n        }\n      }\n      return {\n        ...state,\n        [action.chainId]: { blockNumber: action.blockNumber, state: newState },\n      }\n    } else if (action.type === 'FETCH_ERROR') {\n      return {\n        ...state,\n        [action.chainId]: { ...state[action.chainId], blockNumber: action.blockNumber, error: action.error },\n      }\n    }\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}