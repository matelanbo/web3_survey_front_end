{"ast":null,"code":"import { useChainState } from './useChainState';\n/**\n * Returns an address of the multicall contract used on a given chain.\n * @public\n * @param queryParams see {@link QueryParams}.\n */\n\nexport function useMulticallAddress() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _a;\n\n  return (_a = useChainState(queryParams)) === null || _a === void 0 ? void 0 : _a.multicallAddress;\n}","map":{"version":3,"mappings":"AACA,SAASA,aAAT,QAA8B,iBAA9B;AAEA;;;;;;AAKA,OAAM,SAAUC,mBAAV,GAA2D;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;;;;EAC/D,OAAO,mBAAa,CAACA,WAAD,CAAb,MAA0B,IAA1B,IAA0BC,aAA1B,GAA0B,MAA1B,GAA0BA,GAAEC,gBAAnC;AACD","names":["useChainState","useMulticallAddress","queryParams","_a","multicallAddress"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useMulticallAddress.ts"],"sourcesContent":["import { QueryParams } from '../constants/type/QueryParams'\nimport { useChainState } from './useChainState'\n\n/**\n * Returns an address of the multicall contract used on a given chain.\n * @public\n * @param queryParams see {@link QueryParams}.\n */\nexport function useMulticallAddress(queryParams: QueryParams = {}): string | undefined {\n  return useChainState(queryParams)?.multicallAddress\n}\n"]},"metadata":{},"sourceType":"module"}