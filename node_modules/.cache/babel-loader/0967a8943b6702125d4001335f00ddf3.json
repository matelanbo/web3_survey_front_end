{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\n\nexport const useResolveName = name => {\n  const {\n    library\n  } = useEthers();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [address, setAddress] = useState();\n  useEffect(() => {\n    let mounted = true;\n    void (async () => {\n      if (!library || !name) return;\n\n      try {\n        setIsLoading(true);\n        const resolved = await library.resolveName(name);\n        if (!mounted) return;\n        setAddress(resolved);\n      } catch (e) {\n        if (!mounted) return;\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [library, name]);\n  return {\n    address,\n    isLoading,\n    error\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;;;AASA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAA6B;EACzD,MAAM;IAAEC;EAAF,IAAcH,SAAS,EAA7B;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAe,IAAf,CAAlC;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;EAEAD,SAAS,CAAC,MAAK;IACb,IAAIY,OAAO,GAAG,IAAd;IAEA,KAAK,CAAC,YAAW;MACf,IAAI,CAACP,OAAD,IAAY,CAACD,IAAjB,EAAuB;;MACvB,IAAI;QACFG,YAAY,CAAC,IAAD,CAAZ;QACA,MAAMM,QAAQ,GAAG,MAAMR,OAAO,CAACS,WAAR,CAAoBV,IAApB,CAAvB;QACA,IAAI,CAACQ,OAAL,EAAc;QACdD,UAAU,CAACE,QAAD,CAAV;MACD,CALD,CAKE,OAAOE,CAAP,EAAe;QACf,IAAI,CAACH,OAAL,EAAc;QACdH,QAAQ,CAACM,CAAD,CAAR;MACD,CARD,SAQU;QACRR,YAAY,CAAC,KAAD,CAAZ;MACD;IACF,CAbI,GAAL;IAeA,OAAO,MAAK;MACVK,OAAO,GAAG,KAAV;IACD,CAFD;EAGD,CArBQ,EAqBN,CAACP,OAAD,EAAUD,IAAV,CArBM,CAAT;EAuBA,OAAO;IAAEM,OAAF;IAAWJ,SAAX;IAAsBE;EAAtB,CAAP;AACD,CA9BM","names":["useEffect","useState","useEthers","useResolveName","name","library","isLoading","setIsLoading","error","setError","address","setAddress","mounted","resolved","resolveName","e"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/hooks/useResolveName.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useEthers } from './useEthers'\n\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\nexport const useResolveName = (name: string | undefined) => {\n  const { library } = useEthers()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n  const [address, setAddress] = useState<string | null>()\n\n  useEffect(() => {\n    let mounted = true\n\n    void (async () => {\n      if (!library || !name) return\n      try {\n        setIsLoading(true)\n        const resolved = await library.resolveName(name)\n        if (!mounted) return\n        setAddress(resolved)\n      } catch (e: any) {\n        if (!mounted) return\n        setError(e)\n      } finally {\n        setIsLoading(false)\n      }\n    })()\n\n    return () => {\n      mounted = false\n    }\n  }, [library, name])\n\n  return { address, isLoading, error }\n}\n"]},"metadata":{},"sourceType":"module"}