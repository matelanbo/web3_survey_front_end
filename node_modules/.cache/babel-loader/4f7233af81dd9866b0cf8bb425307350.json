{"ast":null,"code":"var _jsxFileName = \"/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/src/Components/yourWallet/StakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, CircularProgress } from \"@material-ui/core\";\nimport { useStakeTokens, useRewardsCheck, useAnswer, useClaimRewards, useUpdateQuestions, useTotalQuestions, useUpdateMyRewards } from \"../../hooks\";\nimport { utils } from \"ethers\";\nimport { WalletBalance } from \"./WalletBalance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const [rewardsToAssign, setRewardsToAssign] = useState('');\n  const [maxAnswers, setMaxAnswers] = useState('');\n  const [deadline, setDeadline] = useState('');\n  const [answerId, setAnswerId] = useState(''); //   const handleInputChangeDeadline = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //       const deadline = event.target.value === \"\" ? \"\" : Number(event.target.value)\n  //       setDeadline(deadline)\n  //       console.log(deadline)\n  //   }\n\n  const {\n    approveAndStake,\n    state: approveAndStakeErc20State\n  } = useStakeTokens(tokenAddress); //  console.log(\"here is rewards to assign:\", rewardsToAssign)\n\n  const handleQuestionnaireCreation = event => {\n    event.preventDefault();\n    console.log(\"here is rewards to assign:\");\n    const rewardsToAssignAsWei = utils.parseEther(rewardsToAssign.toString());\n    console.log(\"here is rewards to assign:\", rewardsToAssignAsWei);\n    return approveAndStake(rewardsToAssignAsWei.toString(), maxAnswers, deadline);\n  };\n\n  const rewards = useRewardsCheck(tokenAddress);\n  const formattedRewards = rewards ? parseFloat(formatUnits(rewards, 18)) : 0;\n  const numberOfQuestions = useTotalQuestions(\"0\"); // const formattedNumberOfQuestions: number = numberOfQuestions ? parseFloat(formatUnits(numberOfQuestions, 18)) : 0\n\n  const {\n    answerQuestions,\n    state: answerState\n  } = useAnswer(\"0\");\n\n  const handleAnswer = id => {\n    console.log(\"Answered question \", id);\n    answerQuestions(id);\n  };\n\n  const {\n    claimRewards,\n    state: claimRewardsState\n  } = useClaimRewards(\"0\");\n\n  const handleClaimRewards = () => {\n    console.log(\"rewards claimed\");\n    claimRewards();\n  };\n\n  const {\n    updateQuestions,\n    state: updateQuestionsState\n  } = useUpdateQuestions(\"0\");\n\n  const handleUpdateQuestions = () => {\n    console.log(\"questions updating...\");\n    updateQuestions();\n  };\n\n  const {\n    updateMyRewards,\n    state: updateMyRewardsState\n  } = useUpdateMyRewards(\"0\");\n\n  const handleUpdateMyRewards = () => {\n    console.log(\"rewards updating...\");\n    updateMyRewards();\n  };\n\n  const isMining = approveAndStakeErc20State.status === \"Mining\" || answerState.status === \"Mining\" || claimRewardsState.status === \"Mining\"; //const temp = useQuestionsList(\"0\")\n  //const myAnsweredQuestions = useMyAnsweredQuestions(\"0\")\n\n  const questionsList = [{\n    'id': 0,\n    'status': 0,\n    'spots': 11,\n    'maxAnswers': 20,\n    \"rewards\": 1\n  }, {\n    'id': 1,\n    'status': 0,\n    'spots': 11,\n    'maxAnswers': 20,\n    \"rewards\": 1\n  }, {\n    'id': 2,\n    'status': 1,\n    'spots': 11,\n    'maxAnswers': 20,\n    \"rewards\": 1\n  }];\n  const activeQuestions = questionsList.map(questions => {\n    if (questions.status === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Question #\", questions.id, \"   \", questions.spots, \"/\", questions.maxAnswers, \" Total Rewards: \", questions.rewards]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleAnswer(questions.id.toString()),\n          color: \"primary\",\n          size: \"large\",\n          disabled: isMining,\n          children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 37\n          }, this) : \"Answer Question \" + questions.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this);\n    }\n  });\n  console.log(activeQuestions);\n  const unactiveQuestions = questionsList.map(questions => {\n    if (questions.status !== 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question \", questions.id, \" closed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this);\n    }\n  }); //const myAnsweredQuestionsList = useMyAnsweredQuestions(\"0\")\n\n  console.log(questionsList);\n  const myAnsweredQuestionsList = [0, 1];\n  const getMyAnsweredQuestions = myAnsweredQuestionsList.map(questionId => {\n    const question = questionsList[questionId];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Question #\", question.id, \"   \", question.spots, \"/\", question.maxAnswers]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Status: \", question.status === 0 ? \"open\" : \"closed\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }); //const myCreatedQuestionsList = useMyCreatedQuestions(\"0\")\n\n  const myCreatedQuestionsList = [0, 1];\n  const getMyCreatedQuestions = myCreatedQuestionsList.map(questionId => {\n    const question = questionsList[questionId];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Question #\", question.id, \"   \", question.spots, \"/\", question.maxAnswers, \"Status: \", question.status === 0 ? \"open\" : \"closed\", \", Rewards: \", question.rewards, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }); //   console.log(isMining)\n  // console.log(rewardsToAssign, maxAnswers, deadline)\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(WalletBalance, {\n        token: token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleQuestionnaireCreation,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"rewards to assign:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            value: rewardsToAssign,\n            onChange: e => setRewardsToAssign(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Maximun answers to accept:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            required: true,\n            value: maxAnswers,\n            onChange: e => setMaxAnswers(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Deadline:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            required: true,\n            value: deadline,\n            onChange: e => setDeadline(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Creat Questionnaire!!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your rewards:\", formattedRewards]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total number of questions is :\", numberOfQuestions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), activeQuestions, unactiveQuestions, formattedRewards === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Rewards to claim!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClaimRewards,\n        color: \"primary\",\n        size: \"large\",\n        disabled: isMining,\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 37\n        }, this) : \"Claim Rewards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleUpdateQuestions,\n        color: \"primary\",\n        size: \"large\",\n        disabled: isMining,\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 33\n        }, this) : \"Update questions status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleUpdateMyRewards,\n        color: \"primary\",\n        size: \"large\",\n        disabled: isMining,\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 33\n        }, this) : \"Update my rewards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"My Answered Questionnaires:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"My Created Questionnaire:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), getMyCreatedQuestions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StakeForm, \"pdcGcNJ8cNPt6L601SVeHUq/Tgo=\", false, function () {\n  return [useEthers, useTokenBalance, useStakeTokens, useRewardsCheck, useTotalQuestions, useAnswer, useClaimRewards, useUpdateQuestions, useUpdateMyRewards];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"names":["React","useState","useEthers","useTokenBalance","formatUnits","Button","CircularProgress","useStakeTokens","useRewardsCheck","useAnswer","useClaimRewards","useUpdateQuestions","useTotalQuestions","useUpdateMyRewards","utils","WalletBalance","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","rewardsToAssign","setRewardsToAssign","maxAnswers","setMaxAnswers","deadline","setDeadline","answerId","setAnswerId","approveAndStake","state","approveAndStakeErc20State","handleQuestionnaireCreation","event","preventDefault","console","log","rewardsToAssignAsWei","parseEther","toString","rewards","formattedRewards","numberOfQuestions","answerQuestions","answerState","handleAnswer","id","claimRewards","claimRewardsState","handleClaimRewards","updateQuestions","updateQuestionsState","handleUpdateQuestions","updateMyRewards","updateMyRewardsState","handleUpdateMyRewards","isMining","status","questionsList","activeQuestions","map","questions","spots","unactiveQuestions","myAnsweredQuestionsList","getMyAnsweredQuestions","questionId","question","myCreatedQuestionsList","getMyCreatedQuestions","e","target","value"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/src/Components/yourWallet/StakeForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress } from \"@material-ui/core\"\nimport { useStakeTokens, useRewardsCheck, useAnswer, useClaimRewards, useUpdateQuestions, useTotalQuestions, useUpdateMyRewards, useQuestionsList, useMyAnsweredQuestions, useMyCreatedQuestions } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport { WalletBalance } from \"./WalletBalance\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({ token }: StakeFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n\n    const [rewardsToAssign, setRewardsToAssign] = useState('')\n    const [maxAnswers, setMaxAnswers] = useState('')\n    const [deadline, setDeadline] = useState('')\n\n    const [answerId, setAnswerId] = useState('')\n\n\n\n    //   const handleInputChangeDeadline = (event: React.ChangeEvent<HTMLInputElement>) => {\n    //       const deadline = event.target.value === \"\" ? \"\" : Number(event.target.value)\n    //       setDeadline(deadline)\n    //       console.log(deadline)\n    //   }\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n    //  console.log(\"here is rewards to assign:\", rewardsToAssign)\n    const handleQuestionnaireCreation = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        console.log(\"here is rewards to assign:\")\n        const rewardsToAssignAsWei = utils.parseEther(rewardsToAssign.toString())\n        console.log(\"here is rewards to assign:\", rewardsToAssignAsWei)\n        return approveAndStake(rewardsToAssignAsWei.toString(), maxAnswers, deadline)\n    }\n\n\n\n    const rewards = useRewardsCheck(tokenAddress)\n    const formattedRewards: number = rewards ? parseFloat(formatUnits(rewards, 18)) : 0\n\n    const numberOfQuestions = useTotalQuestions(\"0\")\n    // const formattedNumberOfQuestions: number = numberOfQuestions ? parseFloat(formatUnits(numberOfQuestions, 18)) : 0\n\n    const { answerQuestions, state: answerState } = useAnswer(\"0\")\n    const handleAnswer = (id: string) => {\n        console.log(\"Answered question \", id)\n        answerQuestions(id)\n    }\n\n\n\n    const { claimRewards, state: claimRewardsState } = useClaimRewards(\"0\")\n    const handleClaimRewards = () => {\n        console.log(\"rewards claimed\")\n        claimRewards()\n    }\n\n    const { updateQuestions, state: updateQuestionsState } = useUpdateQuestions(\"0\")\n    const handleUpdateQuestions = () => {\n        console.log(\"questions updating...\")\n        updateQuestions()\n    }\n\n    const { updateMyRewards, state: updateMyRewardsState } = useUpdateMyRewards(\"0\")\n    const handleUpdateMyRewards = () => {\n        console.log(\"rewards updating...\")\n        updateMyRewards()\n    }\n    const isMining = approveAndStakeErc20State.status === \"Mining\" ||\n        answerState.status === \"Mining\" ||\n        claimRewardsState.status === \"Mining\"\n    //const temp = useQuestionsList(\"0\")\n    //const myAnsweredQuestions = useMyAnsweredQuestions(\"0\")\n    const questionsList = [{ 'id': 0, 'status': 0, 'spots': 11, 'maxAnswers': 20, \"rewards\": 1 }, { 'id': 1, 'status': 0, 'spots': 11, 'maxAnswers': 20, \"rewards\": 1 }, { 'id': 2, 'status': 1, 'spots': 11, 'maxAnswers': 20, \"rewards\": 1 }]\n    const activeQuestions = questionsList.map((questions) => {\n        if (questions.status === 0) {\n            return (\n                <div>\n                    <h4>Question #{questions.id}   {questions.spots}/{questions.maxAnswers} Total Rewards: {questions.rewards}</h4>\n                    <Button\n                        onClick={() => handleAnswer(questions.id.toString())}\n                        color=\"primary\"\n                        size=\"large\"\n                        disabled={isMining}>\n                        {isMining ? <CircularProgress size={26} /> : \"Answer Question \" + questions.id}\n                    </Button>\n                </div>\n            )\n        }\n    })\n    console.log(activeQuestions)\n    const unactiveQuestions = questionsList.map((questions) => {\n        if (questions.status !== 0) {\n            return (\n                <div>\n                    <p>Question {questions.id} closed</p>\n                </div>\n            )\n        }\n    })\n\n    //const myAnsweredQuestionsList = useMyAnsweredQuestions(\"0\")\n    console.log(questionsList)\n    const myAnsweredQuestionsList = [0, 1]\n    const getMyAnsweredQuestions = myAnsweredQuestionsList.map((questionId: number) => {\n        const question = questionsList[questionId]\n        return (\n            <div>\n                <h4>Question #{question.id}   {question.spots}/{question.maxAnswers}</h4>\n                <h4>Status: {question.status === 0 ? \"open\" : \"closed\"} </h4>\n            </div>\n        )\n    }\n    )\n    //const myCreatedQuestionsList = useMyCreatedQuestions(\"0\")\n    const myCreatedQuestionsList = [0, 1]\n    const getMyCreatedQuestions = myCreatedQuestionsList.map((questionId: number) => {\n        const question = questionsList[questionId]\n        return (\n            <div>\n                <h4>Question #{question.id}   {question.spots}/{question.maxAnswers}\n                    Status: {question.status === 0 ? \"open\" : \"closed\"}, Rewards: {question.rewards} </h4>\n            </div>\n        )\n    }\n    )\n\n    //   console.log(isMining)\n\n    // console.log(rewardsToAssign, maxAnswers, deadline)\n    return (\n        <>\n            <div>\n                <WalletBalance token={token}></WalletBalance>\n                <form onSubmit={handleQuestionnaireCreation}>\n                    <label>\n                        rewards to assign:\n                        <input type=\"text\" required value={rewardsToAssign} onChange={(e) => setRewardsToAssign(e.target.value)}>\n                        </input>\n                    </label>\n                    <label>\n                        Maximun answers to accept:\n                        <input type=\"number\" required value={maxAnswers} onChange={(e) => setMaxAnswers(e.target.value)}>\n                        </input>\n                    </label>\n                    <label>\n                        Deadline:\n                        <input type=\"number\" required value={deadline} onChange={(e) => setDeadline(e.target.value)}>\n                        </input>\n                    </label>\n                    {isMining ? <CircularProgress size={26} /> :\n                        <input type=\"submit\" value=\"Creat Questionnaire!!!\"></input>}\n                </form>\n            </div>\n            <div>\n                <p>Your rewards:{formattedRewards}</p>\n            </div>\n            <div>\n                <p>Total number of questions is :{numberOfQuestions}</p>\n            </div>\n            {activeQuestions}\n            {unactiveQuestions}\n            {formattedRewards === 0 ?\n                <p>No Rewards to claim!</p> :\n                <div>\n                    <Button\n                        onClick={handleClaimRewards}\n                        color=\"primary\"\n                        size=\"large\"\n                        disabled={isMining}>\n                        {isMining ? <CircularProgress size={26} /> : \"Claim Rewards\"}\n                    </Button>\n                </div>\n            }\n            <div>\n                <Button\n                    onClick={handleUpdateQuestions}\n                    color=\"primary\"\n                    size=\"large\"\n                    disabled={isMining}>\n                    {isMining ? <CircularProgress size={26} /> : \"Update questions status\"}\n                </Button>\n            </div>\n            <div>\n                <Button\n                    onClick={handleUpdateMyRewards}\n                    color=\"primary\"\n                    size=\"large\"\n                    disabled={isMining}>\n                    {isMining ? <CircularProgress size={26} /> : \"Update my rewards\"}\n                </Button>\n            </div>\n            <div>\n                <p>My Answered Questionnaires:</p>\n\n            </div>\n            <div>\n                <p>My Created Questionnaire:</p>\n                {getMyCreatedQuestions}\n            </div>\n        </>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AAEA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,eAA3C;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,MAAT,EAAwBC,gBAAxB,QAAgD,mBAAhD;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,SAA1C,EAAqDC,eAArD,EAAsEC,kBAAtE,EAA0FC,iBAA1F,EAA6GC,kBAA7G,QAAwM,aAAxM;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,aAAT,QAA8B,iBAA9B;;;AAMA,OAAO,MAAMC,SAAS,GAAG,QAA+B;EAAA;;EAAA,IAA9B;IAAEC;EAAF,CAA8B;EACpD,MAAM;IAAEC,OAAO,EAAEC,YAAX;IAAyBC;EAAzB,IAAkCH,KAAxC;EACA,MAAM;IAAEI;EAAF,IAAcnB,SAAS,EAA7B;EACA,MAAMoB,YAAY,GAAGnB,eAAe,CAACgB,YAAD,EAAeE,OAAf,CAApC;EACA,MAAME,qBAA6B,GAAGD,YAAY,GAAGE,UAAU,CAACpB,WAAW,CAACkB,YAAD,EAAe,EAAf,CAAZ,CAAb,GAA+C,CAAjG;EAEA,MAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCzB,QAAQ,CAAC,EAAD,CAAtD;EACA,MAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAAC4B,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAAC,EAAD,CAAxC;EAEA,MAAM,CAAC8B,QAAD,EAAWC,WAAX,IAA0B/B,QAAQ,CAAC,EAAD,CAAxC,CAVoD,CAcpD;EACA;EACA;EACA;EACA;;EAEA,MAAM;IAAEgC,eAAF;IAAmBC,KAAK,EAAEC;EAA1B,IAAwD5B,cAAc,CAACY,YAAD,CAA5E,CApBoD,CAqBpD;;EACA,MAAMiB,2BAA2B,GAAIC,KAAD,IAA6C;IAC7EA,KAAK,CAACC,cAAN;IACAC,OAAO,CAACC,GAAR,CAAY,4BAAZ;IACA,MAAMC,oBAAoB,GAAG3B,KAAK,CAAC4B,UAAN,CAAiBjB,eAAe,CAACkB,QAAhB,EAAjB,CAA7B;IACAJ,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,oBAA1C;IACA,OAAOR,eAAe,CAACQ,oBAAoB,CAACE,QAArB,EAAD,EAAkChB,UAAlC,EAA8CE,QAA9C,CAAtB;EACH,CAND;;EAUA,MAAMe,OAAO,GAAGpC,eAAe,CAACW,YAAD,CAA/B;EACA,MAAM0B,gBAAwB,GAAGD,OAAO,GAAGpB,UAAU,CAACpB,WAAW,CAACwC,OAAD,EAAU,EAAV,CAAZ,CAAb,GAA0C,CAAlF;EAEA,MAAME,iBAAiB,GAAGlC,iBAAiB,CAAC,GAAD,CAA3C,CAnCoD,CAoCpD;;EAEA,MAAM;IAAEmC,eAAF;IAAmBb,KAAK,EAAEc;EAA1B,IAA0CvC,SAAS,CAAC,GAAD,CAAzD;;EACA,MAAMwC,YAAY,GAAIC,EAAD,IAAgB;IACjCX,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCU,EAAlC;IACAH,eAAe,CAACG,EAAD,CAAf;EACH,CAHD;;EAOA,MAAM;IAAEC,YAAF;IAAgBjB,KAAK,EAAEkB;EAAvB,IAA6C1C,eAAe,CAAC,GAAD,CAAlE;;EACA,MAAM2C,kBAAkB,GAAG,MAAM;IAC7Bd,OAAO,CAACC,GAAR,CAAY,iBAAZ;IACAW,YAAY;EACf,CAHD;;EAKA,MAAM;IAAEG,eAAF;IAAmBpB,KAAK,EAAEqB;EAA1B,IAAmD5C,kBAAkB,CAAC,GAAD,CAA3E;;EACA,MAAM6C,qBAAqB,GAAG,MAAM;IAChCjB,OAAO,CAACC,GAAR,CAAY,uBAAZ;IACAc,eAAe;EAClB,CAHD;;EAKA,MAAM;IAAEG,eAAF;IAAmBvB,KAAK,EAAEwB;EAA1B,IAAmD7C,kBAAkB,CAAC,GAAD,CAA3E;;EACA,MAAM8C,qBAAqB,GAAG,MAAM;IAChCpB,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACAiB,eAAe;EAClB,CAHD;;EAIA,MAAMG,QAAQ,GAAGzB,yBAAyB,CAAC0B,MAA1B,KAAqC,QAArC,IACbb,WAAW,CAACa,MAAZ,KAAuB,QADV,IAEbT,iBAAiB,CAACS,MAAlB,KAA6B,QAFjC,CA/DoD,CAkEpD;EACA;;EACA,MAAMC,aAAa,GAAG,CAAC;IAAE,MAAM,CAAR;IAAW,UAAU,CAArB;IAAwB,SAAS,EAAjC;IAAqC,cAAc,EAAnD;IAAuD,WAAW;EAAlE,CAAD,EAAwE;IAAE,MAAM,CAAR;IAAW,UAAU,CAArB;IAAwB,SAAS,EAAjC;IAAqC,cAAc,EAAnD;IAAuD,WAAW;EAAlE,CAAxE,EAA+I;IAAE,MAAM,CAAR;IAAW,UAAU,CAArB;IAAwB,SAAS,EAAjC;IAAqC,cAAc,EAAnD;IAAuD,WAAW;EAAlE,CAA/I,CAAtB;EACA,MAAMC,eAAe,GAAGD,aAAa,CAACE,GAAd,CAAmBC,SAAD,IAAe;IACrD,IAAIA,SAAS,CAACJ,MAAV,KAAqB,CAAzB,EAA4B;MACxB,oBACI;QAAA,wBACI;UAAA,yBAAeI,SAAS,CAACf,EAAzB,SAAgCe,SAAS,CAACC,KAA1C,OAAkDD,SAAS,CAACtC,UAA5D,sBAAwFsC,SAAS,CAACrB,OAAlG;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,MAAD;UACI,OAAO,EAAE,MAAMK,YAAY,CAACgB,SAAS,CAACf,EAAV,CAAaP,QAAb,EAAD,CAD/B;UAEI,KAAK,EAAC,SAFV;UAGI,IAAI,EAAC,OAHT;UAII,QAAQ,EAAEiB,QAJd;UAAA,UAKKA,QAAQ,gBAAG,QAAC,gBAAD;YAAkB,IAAI,EAAE;UAAxB;YAAA;YAAA;YAAA;UAAA,QAAH,GAAoC,qBAAqBK,SAAS,CAACf;QALhF;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ;IAYH;EACJ,CAfuB,CAAxB;EAgBAX,OAAO,CAACC,GAAR,CAAYuB,eAAZ;EACA,MAAMI,iBAAiB,GAAGL,aAAa,CAACE,GAAd,CAAmBC,SAAD,IAAe;IACvD,IAAIA,SAAS,CAACJ,MAAV,KAAqB,CAAzB,EAA4B;MACxB,oBACI;QAAA,uBACI;UAAA,wBAAaI,SAAS,CAACf,EAAvB;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ;IAKH;EACJ,CARyB,CAA1B,CAtFoD,CAgGpD;;EACAX,OAAO,CAACC,GAAR,CAAYsB,aAAZ;EACA,MAAMM,uBAAuB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAhC;EACA,MAAMC,sBAAsB,GAAGD,uBAAuB,CAACJ,GAAxB,CAA6BM,UAAD,IAAwB;IAC/E,MAAMC,QAAQ,GAAGT,aAAa,CAACQ,UAAD,CAA9B;IACA,oBACI;MAAA,wBACI;QAAA,yBAAeC,QAAQ,CAACrB,EAAxB,SAA+BqB,QAAQ,CAACL,KAAxC,OAAgDK,QAAQ,CAAC5C,UAAzD;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAA,uBAAa4C,QAAQ,CAACV,MAAT,KAAoB,CAApB,GAAwB,MAAxB,GAAiC,QAA9C;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAMH,CAR8B,CAA/B,CAnGoD,CA6GpD;;EACA,MAAMW,sBAAsB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA/B;EACA,MAAMC,qBAAqB,GAAGD,sBAAsB,CAACR,GAAvB,CAA4BM,UAAD,IAAwB;IAC7E,MAAMC,QAAQ,GAAGT,aAAa,CAACQ,UAAD,CAA9B;IACA,oBACI;MAAA,uBACI;QAAA,yBAAeC,QAAQ,CAACrB,EAAxB,SAA+BqB,QAAQ,CAACL,KAAxC,OAAgDK,QAAQ,CAAC5C,UAAzD,cACa4C,QAAQ,CAACV,MAAT,KAAoB,CAApB,GAAwB,MAAxB,GAAiC,QAD9C,iBACmEU,QAAQ,CAAC3B,OAD5E;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAMH,CAR6B,CAA9B,CA/GoD,CA0HpD;EAEA;;EACA,oBACI;IAAA,wBACI;MAAA,wBACI,QAAC,aAAD;QAAe,KAAK,EAAE3B;MAAtB;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAM,QAAQ,EAAEmB,2BAAhB;QAAA,wBACI;UAAA,8CAEI;YAAO,IAAI,EAAC,MAAZ;YAAmB,QAAQ,MAA3B;YAA4B,KAAK,EAAEX,eAAnC;YAAoD,QAAQ,EAAGiD,CAAD,IAAOhD,kBAAkB,CAACgD,CAAC,CAACC,MAAF,CAASC,KAAV;UAAvF;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAMI;UAAA,sDAEI;YAAO,IAAI,EAAC,QAAZ;YAAqB,QAAQ,MAA7B;YAA8B,KAAK,EAAEjD,UAArC;YAAiD,QAAQ,EAAG+C,CAAD,IAAO9C,aAAa,CAAC8C,CAAC,CAACC,MAAF,CAASC,KAAV;UAA/E;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QANJ,eAWI;UAAA,qCAEI;YAAO,IAAI,EAAC,QAAZ;YAAqB,QAAQ,MAA7B;YAA8B,KAAK,EAAE/C,QAArC;YAA+C,QAAQ,EAAG6C,CAAD,IAAO5C,WAAW,CAAC4C,CAAC,CAACC,MAAF,CAASC,KAAV;UAA3E;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QAXJ,EAgBKhB,QAAQ,gBAAG,QAAC,gBAAD;UAAkB,IAAI,EAAE;QAAxB;UAAA;UAAA;UAAA;QAAA,QAAH,gBACL;UAAO,IAAI,EAAC,QAAZ;UAAqB,KAAK,EAAC;QAA3B;UAAA;UAAA;UAAA;QAAA,QAjBR;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAuBI;MAAA,uBACI;QAAA,4BAAiBf,gBAAjB;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAvBJ,eA0BI;MAAA,uBACI;QAAA,6CAAkCC,iBAAlC;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QA1BJ,EA6BKiB,eA7BL,EA8BKI,iBA9BL,EA+BKtB,gBAAgB,KAAK,CAArB,gBACG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADH,gBAEG;MAAA,uBACI,QAAC,MAAD;QACI,OAAO,EAAEQ,kBADb;QAEI,KAAK,EAAC,SAFV;QAGI,IAAI,EAAC,OAHT;QAII,QAAQ,EAAEO,QAJd;QAAA,UAKKA,QAAQ,gBAAG,QAAC,gBAAD;UAAkB,IAAI,EAAE;QAAxB;UAAA;UAAA;UAAA;QAAA,QAAH,GAAoC;MALjD;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAjCR,eA2CI;MAAA,uBACI,QAAC,MAAD;QACI,OAAO,EAAEJ,qBADb;QAEI,KAAK,EAAC,SAFV;QAGI,IAAI,EAAC,OAHT;QAII,QAAQ,EAAEI,QAJd;QAAA,UAKKA,QAAQ,gBAAG,QAAC,gBAAD;UAAkB,IAAI,EAAE;QAAxB;UAAA;UAAA;UAAA;QAAA,QAAH,GAAoC;MALjD;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QA3CJ,eAoDI;MAAA,uBACI,QAAC,MAAD;QACI,OAAO,EAAED,qBADb;QAEI,KAAK,EAAC,SAFV;QAGI,IAAI,EAAC,OAHT;QAII,QAAQ,EAAEC,QAJd;QAAA,UAKKA,QAAQ,gBAAG,QAAC,gBAAD;UAAkB,IAAI,EAAE;QAAxB;UAAA;UAAA;UAAA;QAAA,QAAH,GAAoC;MALjD;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QApDJ,eA6DI;MAAA,uBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QA7DJ,eAiEI;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,EAEKa,qBAFL;IAAA;MAAA;MAAA;MAAA;IAAA,QAjEJ;EAAA,gBADJ;AAwEH,CArMM;;GAAMzD,S;UAEWd,S,EACCC,e,EAiByCI,c,EAY9CC,e,EAGUI,iB,EAGsBH,S,EAQGC,e,EAMMC,kB,EAMAE,kB;;;KA1DhDG,S"},"metadata":{},"sourceType":"module"}