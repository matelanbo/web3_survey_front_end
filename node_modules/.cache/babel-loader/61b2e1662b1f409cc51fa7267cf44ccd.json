{"ast":null,"code":"import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\n\nexport function useTransactions() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chainId: defaultChainId,\n    account\n  } = useEthers();\n  const {\n    addTransaction,\n    transactions\n  } = useTransactionsContext();\n  const {\n    chainId: _chainId\n  } = queryParams;\n  const chainId = useMemo(() => _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId, [_chainId, defaultChainId]);\n  const filtered = useMemo(() => {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter(x => x.transaction.from === account);\n  }, [transactions, chainId, account]);\n  return {\n    transactions: filtered,\n    addTransaction\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,sBAAT,QAAuC,cAAvC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,eAAV,GAAuD;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;EAC3D,MAAM;IAAEC,OAAO,EAAEC,cAAX;IAA2BC;EAA3B,IAAuCL,SAAS,EAAtD;EACA,MAAM;IAAEM,cAAF;IAAkBC;EAAlB,IAAmCR,sBAAsB,EAA/D;EACA,MAAM;IAAEI,OAAO,EAAEK;EAAX,IAAwBN,WAA9B;EAEA,MAAMC,OAAO,GAAGL,OAAO,CAAC,MAAMU,QAAQ,SAAR,YAAQ,WAAR,cAAYJ,cAAnB,EAAmC,CAACI,QAAD,EAAWJ,cAAX,CAAnC,CAAvB;EAEA,MAAMK,QAAQ,GAAGX,OAAO,CAAC,MAAK;;;IAC5B,IAAIK,OAAO,KAAKO,SAAZ,IAAyB,CAACL,OAA9B,EAAuC;MACrC,OAAO,EAAP;IACD;;IACD,OAAO,CAAC,kBAAY,CAACF,OAAD,CAAZ,MAAqB,IAArB,IAAqBQ,aAArB,GAAqBA,EAArB,GAAyB,EAA1B,EAA8BC,MAA9B,CAAsCC,CAAD,IAAOA,CAAC,CAACC,WAAF,CAAcC,IAAd,KAAuBV,OAAnE,CAAP;EACD,CALuB,EAKrB,CAACE,YAAD,EAAeJ,OAAf,EAAwBE,OAAxB,CALqB,CAAxB;EAOA,OAAO;IACLE,YAAY,EAAEE,QADT;IAELH;EAFK,CAAP;AAID","names":["useMemo","useTransactionsContext","useEthers","useTransactions","queryParams","chainId","defaultChainId","account","addTransaction","transactions","_chainId","filtered","undefined","_a","filter","x","transaction","from"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useTransactions.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { useTransactionsContext } from '../providers'\nimport { useEthers } from './useEthers'\n\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\nexport function useTransactions(queryParams: QueryParams = {}) {\n  const { chainId: defaultChainId, account } = useEthers()\n  const { addTransaction, transactions } = useTransactionsContext()\n  const { chainId: _chainId } = queryParams\n\n  const chainId = useMemo(() => _chainId ?? defaultChainId, [_chainId, defaultChainId])\n\n  const filtered = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return (transactions[chainId] ?? []).filter((x) => x.transaction.from === account)\n  }, [transactions, chainId, account])\n\n  return {\n    transactions: filtered,\n    addTransaction,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}