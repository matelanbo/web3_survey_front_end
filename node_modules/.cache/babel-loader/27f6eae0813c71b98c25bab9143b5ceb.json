{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls.map(call => Object.assign(Object.assign({}, call), {\n      address: call.address.toLowerCase()\n    }))];\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map(call => {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call;\n      }\n\n      const blockNumber = action.blockNumber;\n      return Object.assign(Object.assign({}, call), {\n        lastUpdatedBlockNumber: blockNumber\n      });\n    });\n  } else {\n    let finalState = state;\n\n    for (const call of action.calls) {\n      const index = finalState.findIndex(x => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index);\n      }\n    }\n\n    return finalState;\n  }\n}","map":{"version":3,"mappings":"AA+CA;;;AAGA,OAAM,SAAUA,YAAV,GAA4D;EAAA,IAArCC,KAAqC,uEAAlB,EAAkB;EAAA,IAAdC,MAAc;;EAChE,IAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;IAC/B,OAAO,CAAC,GAAGF,KAAJ,EAAW,GAAGC,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAkBC,IAAD,IAAUC,gCAAMD,IAAN,GAAU;MAAEE,OAAO,EAAEF,IAAI,CAACE,OAAL,CAAaC,WAAb;IAAX,CAAV,CAA3B,CAAd,CAAP;EACD,CAFD,MAEO,IAAIP,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;IACzC,OAAOF,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAS;MACxB,IAAIA,IAAI,CAACI,OAAL,KAAiBR,MAAM,CAACQ,OAAxB,IAAmC,CAACR,MAAM,CAACS,YAAP,CAAoBC,QAApB,CAA6BN,IAA7B,CAAxC,EAA4E;QAC1E,OAAOA,IAAP;MACD;;MACD,MAAMO,WAAW,GAAGX,MAAM,CAACW,WAA3B;MACA,uCAAYP,IAAZ,GAAgB;QAAEQ,sBAAsB,EAAED;MAA1B,CAAhB;IACD,CANM,CAAP;EAOD,CARM,MAQA;IACL,IAAIE,UAAU,GAAGd,KAAjB;;IACA,KAAK,MAAMK,IAAX,IAAmBJ,MAAM,CAACE,KAA1B,EAAiC;MAC/B,MAAMY,KAAK,GAAGD,UAAU,CAACE,SAAX,CACXC,CAAD,IAAOA,CAAC,CAACV,OAAF,CAAUC,WAAV,OAA4BH,IAAI,CAACE,OAAL,CAAaC,WAAb,EAA5B,IAA0DS,CAAC,CAACC,IAAF,KAAWb,IAAI,CAACa,IADrE,CAAd;;MAGA,IAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;QAChBD,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKN,KAAlC,CAAb;MACD;IACF;;IACD,OAAOD,UAAP;EACD;AACF","names":["callsReducer","state","action","type","calls","map","call","Object","address","toLowerCase","chainId","updatedCalls","includes","blockNumber","lastUpdatedBlockNumber","finalState","index","findIndex","x","data","filter","_","i"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/providers/chainState/common/callsReducer.ts"],"sourcesContent":["import { ChainId } from '../../..'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport type Action = AddCall | RemoveCall | UpdateCall\n\n/**\n * @public\n */\nexport interface RawCall {\n  chainId: ChainId\n  address: string\n  data: string\n  isStatic?: boolean\n  lastUpdatedBlockNumber?: number\n  refreshPerBlocks?: number\n}\n\n/**\n * @deprecated It's recommended to use RawCall instead\n * @internal Intended for internal use - use it on your own risk\n */\nexport interface ChainCall {\n  chainId?: ChainId\n  address: string\n  data: string\n}\n\ninterface AddCall {\n  type: 'ADD_CALLS'\n  calls: RawCall[]\n}\n\ninterface UpdateCall {\n  type: 'UPDATE_CALLS'\n  calls: RawCall[]\n  updatedCalls: RawCall[]\n  blockNumber: number\n  chainId: number\n}\n\ninterface RemoveCall {\n  type: 'REMOVE_CALLS'\n  calls: RawCall[]\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer(state: RawCall[] = [], action: Action) {\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls.map((call) => ({ ...call, address: call.address.toLowerCase() }))]\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map((call) => {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call\n      }\n      const blockNumber = action.blockNumber\n      return { ...call, lastUpdatedBlockNumber: blockNumber }\n    })\n  } else {\n    let finalState = state\n    for (const call of action.calls) {\n      const index = finalState.findIndex(\n        (x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data\n      )\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index)\n      }\n    }\n    return finalState\n  }\n}\n"]},"metadata":{},"sourceType":"module"}