{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useCall } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nexport const useRewardsCheck = tokenAddress => {\n  _s();\n\n  var _useCall;\n\n  // address\n  // abi\n  // chainId\n  const {\n    abi\n  } = MainRouter;\n  const {\n    chainId\n  } = useEthers();\n  const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface); // Check Rewards\n\n  console.log(\"in\", tokenAddress, tokenFarmAddress);\n  const {\n    value: rewards\n  } = (_useCall = useCall({\n    contract: tokenFarmContract,\n    method: 'myRewards',\n    args: []\n  })) !== null && _useCall !== void 0 ? _useCall : {};\n  return rewards === null || rewards === void 0 ? void 0 : rewards[0];\n};\n\n_s(useRewardsCheck, \"Nyum0ULVizCpkShLzmps9+MsGrE=\", false, function () {\n  return [useEthers, useCall];\n});","map":{"version":3,"names":["useEthers","useCall","constants","utils","networkMapping","MainRouter","Contract","useRewardsCheck","tokenAddress","abi","chainId","tokenFarmAddress","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","console","log","value","rewards","contract","method","args"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/src/hooks/useRewardsCheck.ts"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction, useCall } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nexport const useRewardsCheck = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { abi } = MainRouter\n    const { chainId } = useEthers()\n    const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    // Check Rewards\n    console.log(\"in\", tokenAddress, tokenFarmAddress)\n    const { value: rewards } =\n        useCall({\n            contract: tokenFarmContract,\n            method: 'myRewards',\n            args: []\n        }) ?? {}\n\n    return rewards?.[0]\n\n}"],"mappings":";;AACA,SAASA,SAAT,EAAyCC,OAAzC,QAAwD,eAAxD;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,OAAO,MAAMC,eAAe,GAAIC,YAAD,IAA0B;EAAA;;EAAA;;EACrD;EACA;EACA;EACA,MAAM;IAAEC;EAAF,IAAUJ,UAAhB;EACA,MAAM;IAAEK;EAAF,IAAcV,SAAS,EAA7B;EACA,MAAMW,gBAAgB,GAAGD,OAAO,GAAGN,cAAc,CAAC,GAAD,CAAd,CAAoB,YAApB,EAAkC,CAAlC,CAAH,GAA0CF,SAAS,CAACU,WAApF;EACA,MAAMC,kBAAkB,GAAG,IAAIV,KAAK,CAACW,SAAV,CAAoBL,GAApB,CAA3B;EACA,MAAMM,iBAAiB,GAAG,IAAIT,QAAJ,CAAaK,gBAAb,EAA+BE,kBAA/B,CAA1B,CARqD,CAUrD;;EACAG,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBT,YAAlB,EAAgCG,gBAAhC;EACA,MAAM;IAAEO,KAAK,EAAEC;EAAT,gBACFlB,OAAO,CAAC;IACJmB,QAAQ,EAAEL,iBADN;IAEJM,MAAM,EAAE,WAFJ;IAGJC,IAAI,EAAE;EAHF,CAAD,CADL,+CAKI,EALV;EAOA,OAAOH,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAG,CAAH,CAAd;AAEH,CArBM;;GAAMZ,e;UAKWP,S,EAQhBC,O"},"metadata":{},"sourceType":"module"}