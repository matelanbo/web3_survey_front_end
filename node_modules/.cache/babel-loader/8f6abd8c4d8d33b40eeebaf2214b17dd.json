{"ast":null,"code":"import { notifyDevtools } from '../../devtools';\nexport function performMulticall(provider, multicallExecutor, multicallAddress, blockNumber, uniqueCalls, dispatchState, chainId, reportError) {\n  if (uniqueCalls.length === 0) {\n    return;\n  }\n\n  const start = Date.now();\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls).then(state => {\n    dispatchState({\n      type: 'FETCH_SUCCESS',\n      blockNumber,\n      chainId,\n      state\n    });\n    notifyDevtools({\n      type: 'MULTICALL_SUCCESS',\n      duration: Date.now() - start,\n      chainId,\n      blockNumber,\n      multicallAddress,\n      state\n    });\n  }).catch(error => {\n    reportError(error);\n    dispatchState({\n      type: 'FETCH_ERROR',\n      blockNumber,\n      chainId,\n      error\n    });\n    notifyDevtools({\n      type: 'MULTICALL_ERROR',\n      duration: Date.now() - start,\n      chainId,\n      blockNumber,\n      multicallAddress,\n      calls: uniqueCalls,\n      error\n    });\n  });\n}","map":{"version":3,"mappings":"AAKA,SAASA,cAAT,QAA+B,gBAA/B;AAEA,OAAM,SAAUC,gBAAV,CACJC,QADI,EAEJC,iBAFI,EAQJC,gBARI,EASJC,WATI,EAUJC,WAVI,EAWJC,aAXI,EAYJC,OAZI,EAaJC,WAbI,EAa+B;EAEnC,IAAIH,WAAW,CAACI,MAAZ,KAAuB,CAA3B,EAA8B;IAC5B;EACD;;EAED,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;EACAV,iBAAiB,CAACD,QAAD,EAAWE,gBAAX,EAA6BC,WAA7B,EAA0CC,WAA1C,CAAjB,CACGQ,IADH,CACSC,KAAD,IAAU;IACdR,aAAa,CAAC;MAAES,IAAI,EAAE,eAAR;MAAyBX,WAAzB;MAAsCG,OAAtC;MAA+CO;IAA/C,CAAD,CAAb;IACAf,cAAc,CAAC;MACbgB,IAAI,EAAE,mBADO;MAEbC,QAAQ,EAAEL,IAAI,CAACC,GAAL,KAAaF,KAFV;MAGbH,OAHa;MAIbH,WAJa;MAKbD,gBALa;MAMbW;IANa,CAAD,CAAd;EAQD,CAXH,EAYGG,KAZH,CAYUC,KAAD,IAAU;IACfV,WAAW,CAACU,KAAD,CAAX;IACAZ,aAAa,CAAC;MAAES,IAAI,EAAE,aAAR;MAAuBX,WAAvB;MAAoCG,OAApC;MAA6CW;IAA7C,CAAD,CAAb;IACAnB,cAAc,CAAC;MACbgB,IAAI,EAAE,iBADO;MAEbC,QAAQ,EAAEL,IAAI,CAACC,GAAL,KAAaF,KAFV;MAGbH,OAHa;MAIbH,WAJa;MAKbD,gBALa;MAMbgB,KAAK,EAAEd,WANM;MAOba;IAPa,CAAD,CAAd;EASD,CAxBH;AAyBD","names":["notifyDevtools","performMulticall","provider","multicallExecutor","multicallAddress","blockNumber","uniqueCalls","dispatchState","chainId","reportError","length","start","Date","now","then","state","type","duration","catch","error","calls"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/providers/chainState/common/performMulticall.ts"],"sourcesContent":["import { providers } from 'ethers'\nimport { RawCall } from './callsReducer'\nimport { Dispatch } from 'react'\nimport { ChainStateAction } from './chainStateReducer'\nimport { ChainId } from '../../../constants'\nimport { notifyDevtools } from '../../devtools'\n\nexport function performMulticall(\n  provider: providers.BaseProvider,\n  multicallExecutor: (\n    provider: providers.BaseProvider,\n    multicallAddress: string,\n    blockNumber: number,\n    uniqueCalls: RawCall[]\n  ) => Promise<any>,\n  multicallAddress: string,\n  blockNumber: number,\n  uniqueCalls: RawCall[],\n  dispatchState: Dispatch<ChainStateAction>,\n  chainId: ChainId,\n  reportError: (error: Error) => void\n) {\n  if (uniqueCalls.length === 0) {\n    return\n  }\n\n  const start = Date.now()\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls)\n    .then((state) => {\n      dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state })\n      notifyDevtools({\n        type: 'MULTICALL_SUCCESS',\n        duration: Date.now() - start,\n        chainId,\n        blockNumber,\n        multicallAddress,\n        state,\n      })\n    })\n    .catch((error) => {\n      reportError(error)\n      dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error })\n      notifyDevtools({\n        type: 'MULTICALL_ERROR',\n        duration: Date.now() - start,\n        chainId,\n        blockNumber,\n        multicallAddress,\n        calls: uniqueCalls,\n        error,\n      })\n    })\n}\n"]},"metadata":{},"sourceType":"module"}