{"ast":null,"code":"import { BigNumber } from 'ethers';\n/**\n * @public\n */\n\nexport class CurrencyValue {\n  constructor(currency, value) {\n    this.currency = currency;\n    this.value = value;\n  }\n\n  static fromString(currency, value) {\n    return new CurrencyValue(currency, BigNumber.from(value));\n  }\n\n  static zero(currency) {\n    return new CurrencyValue(currency, BigNumber.from(0));\n  }\n\n  toString() {\n    return this.value.toString();\n  }\n\n  format() {\n    let overrideOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.currency.format(this.value.toString(), overrideOptions);\n  }\n\n  checkCurrency(other) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`);\n    }\n  }\n\n  map(fn) {\n    return new CurrencyValue(this.currency, fn(this.value));\n  }\n\n  add(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.add(other.value));\n  }\n\n  sub(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.sub(other.value));\n  }\n\n  mul(value) {\n    return this.map(x => x.mul(value));\n  }\n\n  div(value) {\n    return this.map(x => x.div(value));\n  }\n\n  mod(value) {\n    return this.map(x => x.mod(value));\n  }\n\n  equals(other) {\n    return this.currency === other.currency && this.value.eq(other.value);\n  }\n\n  lt(other) {\n    this.checkCurrency(other);\n    return this.value.lt(other.value);\n  }\n\n  lte(other) {\n    this.checkCurrency(other);\n    return this.value.lte(other.value);\n  }\n\n  gt(other) {\n    this.checkCurrency(other);\n    return this.value.gt(other.value);\n  }\n\n  gte(other) {\n    this.checkCurrency(other);\n    return this.value.gte(other.value);\n  }\n\n  isZero() {\n    return this.value.isZero();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BigNumber","CurrencyValue","constructor","currency","value","fromString","from","zero","toString","format","overrideOptions","checkCurrency","other","TypeError","ticker","map","fn","add","x","sub","mul","div","mod","equals","eq","lt","lte","gt","gte","isZero"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/model/CurrencyValue.ts"],"sourcesContent":["import { BigNumber, BigNumberish } from 'ethers'\nimport { Currency } from './Currency'\nimport { CurrencyFormatOptions } from './formatting'\n\n/**\n * @public\n */\nexport class CurrencyValue {\n  constructor(readonly currency: Currency, readonly value: BigNumber) {}\n\n  static fromString(currency: Currency, value: string) {\n    return new CurrencyValue(currency, BigNumber.from(value))\n  }\n\n  static zero(currency: Currency) {\n    return new CurrencyValue(currency, BigNumber.from(0))\n  }\n\n  toString() {\n    return this.value.toString()\n  }\n\n  format(overrideOptions: Partial<CurrencyFormatOptions> = {}) {\n    return this.currency.format(this.value.toString(), overrideOptions)\n  }\n\n  private checkCurrency(other: CurrencyValue) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`)\n    }\n  }\n\n  map(fn: (value: BigNumber) => BigNumber) {\n    return new CurrencyValue(this.currency, fn(this.value))\n  }\n\n  add(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.map((x) => x.add(other.value))\n  }\n\n  sub(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.map((x) => x.sub(other.value))\n  }\n\n  mul(value: BigNumberish) {\n    return this.map((x) => x.mul(value))\n  }\n\n  div(value: BigNumberish) {\n    return this.map((x) => x.div(value))\n  }\n\n  mod(value: BigNumberish) {\n    return this.map((x) => x.mod(value))\n  }\n\n  equals(other: CurrencyValue) {\n    return this.currency === other.currency && this.value.eq(other.value)\n  }\n\n  lt(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.lt(other.value)\n  }\n\n  lte(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.lte(other.value)\n  }\n\n  gt(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.gt(other.value)\n  }\n\n  gte(other: CurrencyValue) {\n    this.checkCurrency(other)\n    return this.value.gte(other.value)\n  }\n\n  isZero() {\n    return this.value.isZero()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}