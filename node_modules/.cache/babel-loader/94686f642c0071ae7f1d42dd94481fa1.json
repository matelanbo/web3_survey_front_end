{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { utils } from 'ethers';\nimport { getChainById } from '../helpers';\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig, useLocalStorage } from '../hooks';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport multicall2ABI from '../constants/abi/MultiCall2.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\n\nexport function LocalMulticallProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const updateConfig = useUpdateConfig();\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const [, setMulticallAddress, getCurrent] = useLocalStorage('local_multicall_address' + chainId);\n  const {\n    multicallAddresses,\n    multicallVersion\n  } = useConfig();\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n  const blockNumber = useBlockNumber();\n  useEffect(() => {\n    var _a;\n\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const checkDeployed = async () => {\n        const multicallAddress = getCurrent();\n\n        if (typeof multicallAddress === 'string' && utils.isAddress(multicallAddress)) {\n          const multicallCode = await library.getCode(multicallAddress);\n\n          if (multicallCode !== '0x') {\n            updateConfig({\n              multicallAddresses: {\n                [chainId]: multicallAddress\n              }\n            });\n            return;\n          }\n        }\n\n        const signer = library.getSigner();\n\n        if (!signer) {\n          setLocalMulticallState(LocalMulticallState.Error);\n          return;\n        }\n\n        setLocalMulticallState(LocalMulticallState.Deploying);\n\n        const deployMulticall = async () => {\n          try {\n            const {\n              contractAddress,\n              blockNumber\n            } = await deployContract(multicallVersion === 1 ? multicallABI : multicall2ABI, signer);\n            updateConfig({\n              multicallAddresses: {\n                [chainId]: contractAddress\n              }\n            });\n            setMulticallAddress(contractAddress);\n            setMulticallBlockNumber(blockNumber);\n            setLocalMulticallState(LocalMulticallState.Deployed);\n          } catch (_a) {\n            setLocalMulticallState(LocalMulticallState.Error);\n          }\n        };\n\n        void deployMulticall();\n      };\n\n      void checkDeployed();\n    }\n  }, [library, chainId]);\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    });\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    });\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["useEffect","useState","utils","getChainById","useEthers","useBlockNumber","useConfig","useUpdateConfig","useLocalStorage","multicallABI","multicall2ABI","deployContract","LocalMulticallState","LocalMulticallProvider","children","updateConfig","library","chainId","setMulticallAddress","getCurrent","multicallAddresses","multicallVersion","localMulticallState","setLocalMulticallState","Unknown","multicallBlockNumber","setMulticallBlockNumber","blockNumber","_a","isLocalChain","NonLocal","Deployed","Deploying","checkDeployed","multicallAddress","isAddress","multicallCode","getCode","signer","getSigner","Error","deployMulticall","contractAddress","awaitingMulticallBlock","_jsx"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/providers/LocalMulticallProvider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useState } from 'react'\nimport { utils } from 'ethers'\nimport { getChainById } from '../helpers'\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig, useLocalStorage } from '../hooks'\nimport multicallABI from '../constants/abi/MultiCall.json'\nimport multicall2ABI from '../constants/abi/MultiCall2.json'\nimport { deployContract } from '../helpers/contract'\n\ninterface LocalMulticallProps {\n  children: ReactNode\n}\n\nenum LocalMulticallState {\n  Unknown,\n  NonLocal,\n  Deploying,\n  Deployed,\n  Error,\n}\n\nexport function LocalMulticallProvider({ children }: LocalMulticallProps) {\n  const updateConfig = useUpdateConfig()\n  const { library, chainId } = useEthers()\n  const [, setMulticallAddress, getCurrent] = useLocalStorage('local_multicall_address' + chainId)\n\n  const { multicallAddresses, multicallVersion } = useConfig()\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown)\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState<number>()\n  const blockNumber = useBlockNumber()\n\n  useEffect(() => {\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown)\n    } else if (!getChainById(chainId)?.isLocalChain) {\n      setLocalMulticallState(LocalMulticallState.NonLocal)\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed)\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const checkDeployed = async () => {\n        const multicallAddress = getCurrent()\n\n        if (typeof multicallAddress === 'string' && utils.isAddress(multicallAddress)) {\n          const multicallCode = await library.getCode(multicallAddress)\n          if (multicallCode !== '0x') {\n            updateConfig({ multicallAddresses: { [chainId]: multicallAddress } })\n            return\n          }\n        }\n\n        const signer = library.getSigner()\n        if (!signer) {\n          setLocalMulticallState(LocalMulticallState.Error)\n          return\n        }\n\n        setLocalMulticallState(LocalMulticallState.Deploying)\n\n        const deployMulticall = async () => {\n          try {\n            const { contractAddress, blockNumber } = await deployContract(\n              multicallVersion === 1 ? multicallABI : multicall2ABI,\n              signer\n            )\n            updateConfig({ multicallAddresses: { [chainId]: contractAddress } })\n            setMulticallAddress(contractAddress)\n            setMulticallBlockNumber(blockNumber)\n            setLocalMulticallState(LocalMulticallState.Deployed)\n          } catch {\n            setLocalMulticallState(LocalMulticallState.Error)\n          }\n        }\n        void deployMulticall()\n      }\n      void checkDeployed()\n    }\n  }, [library, chainId])\n\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber\n\n  if (\n    localMulticallState === LocalMulticallState.Deploying ||\n    (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)\n  ) {\n    return <div>Deploying multicall...</div>\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return <div>Error deploying multicall contract</div>\n  } else {\n    return <>{children}</>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}