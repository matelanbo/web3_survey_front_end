{"ast":null,"code":"import detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getInjectedProvider(getPollingInterval) {\n  var _a;\n\n  if (!window.ethereum) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n\n  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n  const injectedProvider = (_a = injectedProviders.find(provider => {\n    var _a;\n\n    return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n  })) !== null && _a !== void 0 ? _a : await detectEthereumProvider();\n\n  if (!injectedProvider) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n\n  const provider = new providers.Web3Provider(injectedProvider, 'any');\n  const chainId = await provider.send('eth_chainId', []);\n  provider.pollingInterval = getPollingInterval(chainId);\n  return provider;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,MAAMC,iBAAiB,GAAG,mCAA1B;AAEA,OAAO,eAAeC,mBAAf,CAAmCC,kBAAnC,EAAmF;;;EACxF,IAAI,CAACC,MAAM,CAACC,QAAZ,EAAsB;IACpBD,MAAM,CAACE,IAAP,CAAYL,iBAAZ;IACA,OAAOM,SAAP;EACD;;EAED,MAAMC,iBAAiB,GAAU,CAACJ,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEC,QAAT,EAA0BL,SAA1B,IAAuC,EAAxE;EACA,MAAMS,gBAAgB,GACpB,uBAAiB,CAACC,IAAlB,CAAwBC,QAAD,IAAa;;;IAClC,OAAO,cAAQ,CAACC,UAAT,MAAmB,IAAnB,IAAmBC,aAAnB,GAAmBA,EAAnB,GAAuB,KAA9B;EACD,CAFD,OAEE,IAFF,IAEEA,aAFF,GAEEA,EAFF,GAEO,MAAMd,sBAAsB,EAHrC;;EAKA,IAAI,CAACU,gBAAL,EAAuB;IACrBL,MAAM,CAACE,IAAP,CAAYL,iBAAZ;IACA,OAAOM,SAAP;EACD;;EAED,MAAMI,QAAQ,GAAG,IAAIX,SAAS,CAACc,YAAd,CAA2BL,gBAA3B,EAA6C,KAA7C,CAAjB;EACA,MAAMM,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,CAAc,aAAd,EAA6B,EAA7B,CAAtB;EACAL,QAAQ,CAACM,eAAT,GAA2Bd,kBAAkB,CAACY,OAAD,CAA7C;EACA,OAAOJ,QAAP;AACD","names":["detectEthereumProvider","providers","GET_METAMASK_LINK","getInjectedProvider","getPollingInterval","window","ethereum","open","undefined","injectedProviders","injectedProvider","find","provider","isMetaMask","_a","Web3Provider","chainId","send","pollingInterval"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/helpers/injectedProvider.ts"],"sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider'\nimport { providers } from 'ethers'\n\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html'\n\nexport async function getInjectedProvider(getPollingInterval: (chaindId: number) => number) {\n  if (!window.ethereum) {\n    window.open(GET_METAMASK_LINK)\n    return undefined\n  }\n\n  const injectedProviders: any[] = (window?.ethereum as any).providers || []\n  const injectedProvider: any =\n    injectedProviders.find((provider) => {\n      return provider.isMetaMask ?? false\n    }) ?? (await detectEthereumProvider())\n\n  if (!injectedProvider) {\n    window.open(GET_METAMASK_LINK)\n    return undefined\n  }\n\n  const provider = new providers.Web3Provider(injectedProvider, 'any')\n  const chainId = await provider.send('eth_chainId', [])\n  provider.pollingInterval = getPollingInterval(chainId)\n  return provider\n}\n"]},"metadata":{},"sourceType":"module"}