{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { useDebounce } from '../../../hooks';\nimport { useReadonlyNetworks } from '../../network';\nimport { BlockNumbersContext } from './context';\nimport { blockNumberReducer } from '../common/reducer';\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock';\nimport { useWindow } from '../../window';\nexport function BlockNumbersProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const networks = useReadonlyNetworks();\n  const [state, dispatch] = useReducer(blockNumberReducer, {});\n  const {\n    isActive\n  } = useWindow();\n  useEffect(() => {\n    const onUnmount = Object.entries(networks).map(_ref2 => {\n      let [chainId, provider] = _ref2;\n      return subscribeToNewBlock(provider, Number(chainId), dispatch, isActive);\n    });\n    return () => {\n      onUnmount.forEach(fn => fn());\n    };\n  }, [networks]);\n  const debouncedState = useDebounce(state, 100);\n  return _jsx(BlockNumbersContext.Provider, {\n    value: debouncedState,\n    children: children\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,SAApB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,mBAAT,QAAoC,WAApC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,mBAAT,QAAoC,+BAApC;AACA,SAASC,SAAT,QAA0B,cAA1B;AAMA,OAAM,SAAUC,oBAAV,OAAkD;EAAA,IAAnB;IAAEC;EAAF,CAAmB;EACtD,MAAMC,QAAQ,GAAGP,mBAAmB,EAApC;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACI,kBAAD,EAAqB,EAArB,CAApC;EACA,MAAM;IAAEQ;EAAF,IAAeN,SAAS,EAA9B;EAEAP,SAAS,CAAC,MAAK;IACb,MAAMc,SAAS,GAAGC,MAAM,CAACC,OAAP,CAAeN,QAAf,EAAyBO,GAAzB,CAA6B;MAAA,IAAC,CAACC,OAAD,EAAUC,QAAV,CAAD;MAAA,OAC7Cb,mBAAmB,CAACa,QAAD,EAAWC,MAAM,CAACF,OAAD,CAAjB,EAA4BN,QAA5B,EAAsCC,QAAtC,CAD0B;IAAA,CAA7B,CAAlB;IAIA,OAAO,MAAK;MACVC,SAAS,CAACO,OAAV,CAAmBC,EAAD,IAAQA,EAAE,EAA5B;IACD,CAFD;EAGD,CARQ,EAQN,CAACZ,QAAD,CARM,CAAT;EAUA,MAAMa,cAAc,GAAGrB,WAAW,CAACS,KAAD,EAAQ,GAAR,CAAlC;EAEA,OAAOa,KAACpB,mBAAmB,CAACqB,QAArB,EAA6B;IAACC,KAAK,EAAEH,cAAR;IAAwBd,QAAQ,EAAEA;EAAlC,CAA7B,CAAP;AACD","names":["useEffect","useReducer","useDebounce","useReadonlyNetworks","BlockNumbersContext","blockNumberReducer","subscribeToNewBlock","useWindow","BlockNumbersProvider","children","networks","state","dispatch","isActive","onUnmount","Object","entries","map","chainId","provider","Number","forEach","fn","debouncedState","_jsx","Provider","value"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/providers/blockNumber/blockNumbers/provider.tsx"],"sourcesContent":["import { ReactNode, useEffect, useReducer } from 'react'\nimport { useDebounce } from '../../../hooks'\nimport { useReadonlyNetworks } from '../../network'\nimport { BlockNumbersContext } from './context'\nimport { blockNumberReducer } from '../common/reducer'\nimport { subscribeToNewBlock } from '../common/subscribeToNewBlock'\nimport { useWindow } from '../../window'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function BlockNumbersProvider({ children }: Props) {\n  const networks = useReadonlyNetworks()\n  const [state, dispatch] = useReducer(blockNumberReducer, {})\n  const { isActive } = useWindow()\n\n  useEffect(() => {\n    const onUnmount = Object.entries(networks).map(([chainId, provider]) =>\n      subscribeToNewBlock(provider, Number(chainId), dispatch, isActive)\n    )\n\n    return () => {\n      onUnmount.forEach((fn) => fn())\n    }\n  }, [networks])\n\n  const debouncedState = useDebounce(state, 100)\n\n  return <BlockNumbersContext.Provider value={debouncedState} children={children} />\n}\n"]},"metadata":{},"sourceType":"module"}