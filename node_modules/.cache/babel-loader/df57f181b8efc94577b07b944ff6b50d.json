{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nexport const useQuestionsList = tokenAddress => {\n  _s();\n\n  // address\n  // abi\n  // chainId\n  const {\n    abi\n  } = MainRouter;\n  const {\n    account,\n    chainId\n  } = useEthers();\n  const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface); // Check Rewards\n  //const results = [[0], [1], [2], [3]]\n\n  /*     console.log(\"questionlist in\", account, tokenFarmAddress)\n      const { value: results } =\n          useCall({\n              contract: tokenFarmContract,\n              method: 'getQuestionsStatus',\n              args: []\n          }) ?? {}\n      console.log(\"out\")\n      const questionsList = results[1]\n      console.log(questionsList.length)\n      console.log(results) */\n\n  /*     const toShow = []\n      for (var i = 0; i < questionsList.length; i++) {\n          const formattedAnswered: number = results[1][i] ? parseFloat(formatUnits(results[1][i], 0)) : 0\n          const formattedMaxAnswers: number = results[2][i] ? parseFloat(formatUnits(results[2][i], 0)) : 0\n          const formattedRewards: number = results[3][i] ? parseFloat(formatUnits(results[3][i], 18)) : 0\n          toShow.push({ \"id\": i, \"status\": results[0][i], \"answered\": formattedAnswered, \"maxAnswers\": formattedMaxAnswers, \"rewards\": formattedRewards })\n      }\n      console.log(toShow)\n      console.log(\"ha\", toShow[0].answered)\n      return toShow */\n  //return [{ 'id': 0, 'status': 0, 'answered': 11, 'maxAnswers': 20 }, { 'id': 1, 'status': 0, 'spots': 11, 'maxAnswers': 20 }, { 'id': 2, 'status': 1, 'spots': 11, 'maxAnswers': 20 }]\n};\n\n_s(useQuestionsList, \"FPNriP0SSGsTwXbOSi4xVpvkj00=\", false, function () {\n  return [useEthers];\n});","map":{"version":3,"names":["useEthers","constants","utils","networkMapping","MainRouter","Contract","useQuestionsList","tokenAddress","abi","account","chainId","tokenFarmAddress","AddressZero","tokenFarmInterface","Interface","tokenFarmContract"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/src/hooks/useQuestionsList.tsx"],"sourcesContent":["import { useEthers, useCall } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nexport const useQuestionsList = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { abi } = MainRouter\n    const { account, chainId } = useEthers()\n    const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    // Check Rewards\n    //const results = [[0], [1], [2], [3]]\n    /*     console.log(\"questionlist in\", account, tokenFarmAddress)\n        const { value: results } =\n            useCall({\n                contract: tokenFarmContract,\n                method: 'getQuestionsStatus',\n                args: []\n            }) ?? {}\n        console.log(\"out\")\n        const questionsList = results[1]\n        console.log(questionsList.length)\n        console.log(results) */\n    /*     const toShow = []\n        for (var i = 0; i < questionsList.length; i++) {\n            const formattedAnswered: number = results[1][i] ? parseFloat(formatUnits(results[1][i], 0)) : 0\n            const formattedMaxAnswers: number = results[2][i] ? parseFloat(formatUnits(results[2][i], 0)) : 0\n            const formattedRewards: number = results[3][i] ? parseFloat(formatUnits(results[3][i], 18)) : 0\n            toShow.push({ \"id\": i, \"status\": results[0][i], \"answered\": formattedAnswered, \"maxAnswers\": formattedMaxAnswers, \"rewards\": formattedRewards })\n        }\n        console.log(toShow)\n        console.log(\"ha\", toShow[0].answered)\n        return toShow */\n    //return [{ 'id': 0, 'status': 0, 'answered': 11, 'maxAnswers': 20 }, { 'id': 1, 'status': 0, 'spots': 11, 'maxAnswers': 20 }, { 'id': 2, 'status': 1, 'spots': 11, 'maxAnswers': 20 }]\n}"],"mappings":";;AAAA,SAASA,SAAT,QAAmC,eAAnC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAGA,OAAO,MAAMC,gBAAgB,GAAIC,YAAD,IAA0B;EAAA;;EACtD;EACA;EACA;EACA,MAAM;IAAEC;EAAF,IAAUJ,UAAhB;EACA,MAAM;IAAEK,OAAF;IAAWC;EAAX,IAAuBV,SAAS,EAAtC;EACA,MAAMW,gBAAgB,GAAGD,OAAO,GAAGP,cAAc,CAAC,GAAD,CAAd,CAAoB,YAApB,EAAkC,CAAlC,CAAH,GAA0CF,SAAS,CAACW,WAApF;EACA,MAAMC,kBAAkB,GAAG,IAAIX,KAAK,CAACY,SAAV,CAAoBN,GAApB,CAA3B;EACA,MAAMO,iBAAiB,GAAG,IAAIV,QAAJ,CAAaM,gBAAb,EAA+BE,kBAA/B,CAA1B,CARsD,CAUtD;EACA;;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACH,CAlCM;;GAAMP,gB;UAKoBN,S"},"metadata":{},"sourceType":"module"}