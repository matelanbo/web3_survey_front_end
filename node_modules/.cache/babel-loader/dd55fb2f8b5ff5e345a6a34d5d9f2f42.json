{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumber, useBlockNumbers } from '../hooks';\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\n\nexport function useGasPrice() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    library\n  } = useEthers();\n  const providers = useReadonlyNetworks();\n\n  const _blockNumber = useBlockNumber();\n\n  const blockNumbers = useBlockNumbers();\n  const [gasPrice, setGasPrice] = useState();\n  const {\n    chainId\n  } = queryParams;\n  const [provider, blockNumber] = useMemo(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber]);\n\n  async function updateGasPrice() {\n    setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));\n  }\n\n  useEffect(() => {\n    void updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"mappings":"AACA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,QAAoC,uCAApC;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,UAAhD;AAGA;;;;;;AAKA,OAAM,SAAUC,WAAV,GAAmD;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;EACvD,MAAM;IAAEC;EAAF,IAAcN,SAAS,EAA7B;EACA,MAAMO,SAAS,GAAGN,mBAAmB,EAArC;;EACA,MAAMO,YAAY,GAAGN,cAAc,EAAnC;;EACA,MAAMO,YAAY,GAAGN,eAAe,EAApC;EAEA,MAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,EAAxC;EAEA,MAAM;IAAEa;EAAF,IAAcP,WAApB;EAEA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BhB,OAAO,CACrC,MAAOc,OAAO,GAAG,CAACL,SAAS,CAACK,OAAD,CAAV,EAAqBH,YAAY,CAACG,OAAD,CAAjC,CAAH,GAAiD,CAACN,OAAD,EAAUE,YAAV,CAD1B,EAErC,CAACD,SAAD,EAAYD,OAAZ,EAAqBG,YAArB,EAAmCD,YAAnC,CAFqC,CAAvC;;EAKA,eAAeO,cAAf,GAA6B;IAC3BJ,WAAW,CAAC,OAAME,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEG,WAAV,EAAN,CAAD,CAAX;EACD;;EAEDnB,SAAS,CAAC,MAAK;IACb,KAAKkB,cAAc,EAAnB;EACD,CAFQ,EAEN,CAACF,QAAD,EAAWC,WAAX,CAFM,CAAT;EAIA,OAAOJ,QAAP;AACD","names":["useEffect","useMemo","useState","useEthers","useReadonlyNetworks","useBlockNumber","useBlockNumbers","useGasPrice","queryParams","library","providers","_blockNumber","blockNumbers","gasPrice","setGasPrice","chainId","provider","blockNumber","updateGasPrice","getGasPrice"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useGasPrice.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useEthers } from './useEthers'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks'\nimport { useBlockNumber, useBlockNumbers } from '../hooks'\nimport { QueryParams } from '../constants/type/QueryParams'\n\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice(queryParams: QueryParams = {}): BigNumber | undefined {\n  const { library } = useEthers()\n  const providers = useReadonlyNetworks()\n  const _blockNumber = useBlockNumber()\n  const blockNumbers = useBlockNumbers()\n\n  const [gasPrice, setGasPrice] = useState<BigNumber | undefined>()\n\n  const { chainId } = queryParams\n\n  const [provider, blockNumber] = useMemo(\n    () => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]),\n    [providers, library, blockNumbers, _blockNumber]\n  )\n\n  async function updateGasPrice() {\n    setGasPrice(await provider?.getGasPrice())\n  }\n\n  useEffect(() => {\n    void updateGasPrice()\n  }, [provider, blockNumber])\n\n  return gasPrice\n}\n"]},"metadata":{},"sourceType":"module"}