{"ast":null,"code":"import { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nconst ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])'];\n/**\n * @public\n */\n\nexport const multicall2Factory = fastEncoding => fastEncoding ? fastEncodingMulticall2 : multicall2;\n/**\n * @public\n */\n\nexport async function multicall2(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n\n  const contract = new Contract(address, ABI, provider);\n  const results = await contract.tryAggregate(false, requests.map(_ref => {\n    let {\n      address,\n      data\n    } = _ref;\n    return [address, data];\n  }), {\n    blockTag: blockNumber\n  });\n  return decodeResult(results, requests);\n}\n/**\n * @public\n */\n\nexport async function fastEncodingMulticall2(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n\n  const response = await provider.call({\n    to: address,\n    data: encodeTryAggregate(false, requests.map(_ref2 => {\n      let {\n        address,\n        data\n      } = _ref2;\n      return [address, data];\n    }))\n  }, blockNumber);\n  const [results] = decodeTryAggregate(response);\n  return decodeResult(results, requests);\n}\n\nfunction decodeResult(results, requests) {\n  var _a;\n\n  const state = {};\n\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const [success, value] = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      success,\n      value\n    };\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAoC,QAApC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,yBAAvD;AAIA,MAAMC,GAAG,GAAG,CACV,yJADU,CAAZ;AAIA;;;;AAGA,OAAO,MAAMC,iBAAiB,GAAIC,YAAD,IAA4BA,YAAY,GAAGC,sBAAH,GAA4BC,UAA9F;AAEP;;;;AAGA,OAAO,eAAeA,UAAf,CACLC,QADK,EAELC,OAFK,EAGLC,WAHK,EAILC,QAJK,EAIc;EAEnB,IAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;IACzB,OAAO,EAAP;EACD;;EACD,MAAMC,QAAQ,GAAG,IAAIb,QAAJ,CAAaS,OAAb,EAAsBN,GAAtB,EAA2BK,QAA3B,CAAjB;EACA,MAAMM,OAAO,GAAwB,MAAMD,QAAQ,CAACE,YAAT,CACzC,KADyC,EAEzCJ,QAAQ,CAACK,GAAT,CAAa;IAAA,IAAC;MAAEP,OAAF;MAAWQ;IAAX,CAAD;IAAA,OAAuB,CAACR,OAAD,EAAUQ,IAAV,CAAvB;EAAA,CAAb,CAFyC,EAGzC;IAAEC,QAAQ,EAAER;EAAZ,CAHyC,CAA3C;EAKA,OAAOS,YAAY,CAACL,OAAD,EAAUH,QAAV,CAAnB;AACD;AAED;;;;AAGA,OAAO,eAAeL,sBAAf,CACLE,QADK,EAELC,OAFK,EAGLC,WAHK,EAILC,QAJK,EAIc;EAEnB,IAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;IACzB,OAAO,EAAP;EACD;;EACD,MAAMQ,QAAQ,GAAG,MAAMZ,QAAQ,CAACa,IAAT,CACrB;IACEC,EAAE,EAAEb,OADN;IAEEQ,IAAI,EAAEf,kBAAkB,CACtB,KADsB,EAEtBS,QAAQ,CAACK,GAAT,CAAa;MAAA,IAAC;QAAEP,OAAF;QAAWQ;MAAX,CAAD;MAAA,OAAuB,CAACR,OAAD,EAAUQ,IAAV,CAAvB;IAAA,CAAb,CAFsB;EAF1B,CADqB,EAQrBP,WARqB,CAAvB;EAUA,MAAM,CAACI,OAAD,IAAYb,kBAAkB,CAACmB,QAAD,CAApC;EACA,OAAOD,YAAY,CAACL,OAAD,EAAUH,QAAV,CAAnB;AACD;;AAED,SAASQ,YAAT,CAAsBL,OAAtB,EAAoDH,QAApD,EAAuE;;;EACrE,MAAMY,KAAK,GAAe,EAA1B;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAAQ,CAACC,MAA7B,EAAqCY,CAAC,EAAtC,EAA0C;IACxC,MAAM;MAAEf,OAAF;MAAWQ;IAAX,IAAoBN,QAAQ,CAACa,CAAD,CAAlC;IACA,MAAM,CAACC,OAAD,EAAUC,KAAV,IAAmBZ,OAAO,CAACU,CAAD,CAAhC;IACA,MAAMG,eAAe,GAAG,WAAK,CAAClB,OAAD,CAAL,MAAc,IAAd,IAAcmB,aAAd,GAAcA,EAAd,GAAkB,EAA1C;IACAD,eAAe,CAACV,IAAD,CAAf,GAAwB;MAAEQ,OAAF;MAAWC;IAAX,CAAxB;IACAH,KAAK,CAACd,OAAD,CAAL,GAAiBkB,eAAjB;EACD;;EACD,OAAOJ,KAAP;AACD","names":["Contract","decodeTryAggregate","encodeTryAggregate","ABI","multicall2Factory","fastEncoding","fastEncodingMulticall2","multicall2","provider","address","blockNumber","requests","length","contract","results","tryAggregate","map","data","blockTag","decodeResult","response","call","to","state","i","success","value","stateForAddress","_a"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/providers/chainState/common/multicall2.ts"],"sourcesContent":["import { Contract, providers } from 'ethers'\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2'\nimport { RawCall } from './callsReducer'\nimport { ChainState } from './model'\n\nconst ABI = [\n  'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])',\n]\n\n/**\n * @public\n */\nexport const multicall2Factory = (fastEncoding: boolean) => (fastEncoding ? fastEncodingMulticall2 : multicall2)\n\n/**\n * @public\n */\nexport async function multicall2(\n  provider: providers.Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const contract = new Contract(address, ABI, provider)\n  const results: [boolean, string][] = await contract.tryAggregate(\n    false,\n    requests.map(({ address, data }) => [address, data]),\n    { blockTag: blockNumber }\n  )\n  return decodeResult(results, requests)\n}\n\n/**\n * @public\n */\nexport async function fastEncodingMulticall2(\n  provider: providers.Provider,\n  address: string,\n  blockNumber: number,\n  requests: RawCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const response = await provider.call(\n    {\n      to: address,\n      data: encodeTryAggregate(\n        false,\n        requests.map(({ address, data }) => [address, data])\n      ),\n    },\n    blockNumber\n  )\n  const [results] = decodeTryAggregate(response)\n  return decodeResult(results, requests)\n}\n\nfunction decodeResult(results: [boolean, string][], requests: RawCall[]) {\n  const state: ChainState = {}\n  for (let i = 0; i < requests.length; i++) {\n    const { address, data } = requests[i]\n    const [success, value] = results[i]\n    const stateForAddress = state[address] ?? {}\n    stateForAddress[data] = { success, value }\n    state[address] = stateForAddress\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}