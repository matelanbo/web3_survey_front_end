{"ast":null,"code":"import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns allowance (tokens left to use by spender) for given token owner - spender relationship.\n * @param tokenAddress address of a token contract\n * @param ownerAddress address of an account to which tokens are linked\n * @param spenderAddress address of an account allowed to spend tokens\n * @param queryParams see {@link QueryParams}.\n * @returns an allowance which is `BigNumber`, or `undefined` if any address or token is `Falsy` or not connected.\n * @public\n * @example\n * const TOKEN_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const SPENDER_ADDRESS = '0xA193E42526F1FEA8C99AF609dcEabf30C1c29fAA'\n * const { account, chainId } = useEthers()\n * const allowance = useTokenAllowance(TOKEN_ADDRESS, account, SPENDER_ADDRESS)\n *\n * return (\n *   {allowance && <p>Remaining allowance: {formatUnits(allowance, 18)} tokens</p>}\n * )\n */\n\nexport function useTokenAllowance(tokenAddress, ownerAddress, spenderAddress) {\n  let queryParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var _a;\n\n  const {\n    value: allowance\n  } = (_a = useCall(ownerAddress && spenderAddress && tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    method: 'allowance',\n    args: [ownerAddress, spenderAddress]\n  }, queryParams)) !== null && _a !== void 0 ? _a : {};\n  return allowance === null || allowance === void 0 ? void 0 : allowance[0];\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAT,QAAyB,QAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAGA,SAASC,OAAT,QAAwB,WAAxB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,iBAAV,CACJC,YADI,EAEJC,YAFI,EAGJC,cAHI,EAIyB;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;;;;EAE7B,MAAM;IAAEC,KAAK,EAAEC;EAAT,IACJ,aAAO,CACLJ,YAAY,IACVC,cADF,IAEEF,YAFF,IAEkB;IACdM,QAAQ,EAAE,IAAIV,QAAJ,CAAaI,YAAb,EAA2BH,cAA3B,CADI;IAEdU,MAAM,EAAE,WAFM;IAGdC,IAAI,EAAE,CAACP,YAAD,EAAeC,cAAf;EAHQ,CAHb,EAQLC,WARK,CAAP,MASC,IATD,IASCM,aATD,GASCA,EATD,GASK,EAVP;EAWA,OAAOJ,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAG,CAAH,CAAhB;AACD","names":["Contract","ERC20Interface","useCall","useTokenAllowance","tokenAddress","ownerAddress","spenderAddress","queryParams","value","allowance","contract","method","args","_a"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/hooks/useTokenAllowance.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\nimport { Contract } from 'ethers'\nimport { ERC20Interface } from '../constants'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { Falsy } from '../model/types'\nimport { useCall } from './useCall'\n\n/**\n * Returns allowance (tokens left to use by spender) for given token owner - spender relationship.\n * @param tokenAddress address of a token contract\n * @param ownerAddress address of an account to which tokens are linked\n * @param spenderAddress address of an account allowed to spend tokens\n * @param queryParams see {@link QueryParams}.\n * @returns an allowance which is `BigNumber`, or `undefined` if any address or token is `Falsy` or not connected.\n * @public\n * @example\n * const TOKEN_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const SPENDER_ADDRESS = '0xA193E42526F1FEA8C99AF609dcEabf30C1c29fAA'\n * const { account, chainId } = useEthers()\n * const allowance = useTokenAllowance(TOKEN_ADDRESS, account, SPENDER_ADDRESS)\n *\n * return (\n *   {allowance && <p>Remaining allowance: {formatUnits(allowance, 18)} tokens</p>}\n * )\n */\nexport function useTokenAllowance(\n  tokenAddress: string | Falsy,\n  ownerAddress: string | Falsy,\n  spenderAddress: string | Falsy,\n  queryParams: QueryParams = {}\n): BigNumber | undefined {\n  const { value: allowance } =\n    useCall(\n      ownerAddress &&\n        spenderAddress &&\n        tokenAddress && {\n          contract: new Contract(tokenAddress, ERC20Interface),\n          method: 'allowance',\n          args: [ownerAddress, spenderAddress],\n        },\n      queryParams\n    ) ?? {}\n  return allowance?.[0]\n}\n"]},"metadata":{},"sourceType":"module"}