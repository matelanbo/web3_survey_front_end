{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) for a specific address.\n * @param address address to lookup\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\n\nexport function useLookupAddress(address) {\n  const {\n    library\n  } = useEthers();\n  const [ens, setENS] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let mounted = true;\n    void (async () => {\n      if (!library || !address) return;\n\n      try {\n        setIsLoading(true);\n        const resolved = await library.lookupAddress(address);\n        if (!mounted) return;\n        setENS(resolved);\n      } catch (e) {\n        if (!mounted) return;\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      mounted = false;\n    };\n  }, [address, library]);\n  return {\n    ens,\n    isLoading,\n    error\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUC,gBAAV,CAA2BC,OAA3B,EAAsD;EAC1D,MAAM;IAAEC;EAAF,IAAcH,SAAS,EAA7B;EACA,MAAM,CAACI,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,EAA9B;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAe,IAAf,CAAlC;EAEAD,SAAS,CAAC,MAAK;IACb,IAAIY,OAAO,GAAG,IAAd;IAEA,KAAK,CAAC,YAAW;MACf,IAAI,CAACP,OAAD,IAAY,CAACD,OAAjB,EAA0B;;MAC1B,IAAI;QACFK,YAAY,CAAC,IAAD,CAAZ;QACA,MAAMI,QAAQ,GAAG,MAAMR,OAAO,CAACS,aAAR,CAAsBV,OAAtB,CAAvB;QACA,IAAI,CAACQ,OAAL,EAAc;QACdL,MAAM,CAACM,QAAD,CAAN;MACD,CALD,CAKE,OAAOE,CAAP,EAAe;QACf,IAAI,CAACH,OAAL,EAAc;QACdD,QAAQ,CAACI,CAAD,CAAR;MACD,CARD,SAQU;QACRN,YAAY,CAAC,KAAD,CAAZ;MACD;IACF,CAbI,GAAL;IAeA,OAAO,MAAK;MACVG,OAAO,GAAG,KAAV;IACD,CAFD;EAGD,CArBQ,EAqBN,CAACR,OAAD,EAAUC,OAAV,CArBM,CAAT;EAuBA,OAAO;IAAEC,GAAF;IAAOE,SAAP;IAAkBE;EAAlB,CAAP;AACD","names":["useEffect","useState","useEthers","useLookupAddress","address","library","ens","setENS","isLoading","setIsLoading","error","setError","mounted","resolved","lookupAddress","e"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useLookupAddress.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useEthers } from './useEthers'\n\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) for a specific address.\n * @param address address to lookup \n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address: string | undefined) {\n  const { library } = useEthers()\n  const [ens, setENS] = useState<string | null>()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    let mounted = true\n\n    void (async () => {\n      if (!library || !address) return\n      try {\n        setIsLoading(true)\n        const resolved = await library.lookupAddress(address)\n        if (!mounted) return\n        setENS(resolved)\n      } catch (e: any) {\n        if (!mounted) return\n        setError(e)\n      } finally {\n        setIsLoading(false)\n      }\n    })()\n\n    return () => {\n      mounted = false\n    }\n  }, [address, library])\n\n  return { ens, isLoading, error }\n}\n"]},"metadata":{},"sourceType":"module"}