{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\";\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nexport const useStakeTokens = tokenAddress => {\n  _s();\n\n  // address\n  // abi\n  // chainId\n  const {\n    abi\n  } = MainRouter;\n  const {\n    chainId\n  } = useEthers();\n  const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface);\n  const erc20ABI = ERC20.abi;\n  const erc20Interface = new utils.Interface(erc20ABI);\n  const erc20Contract = new Contract(tokenAddress, erc20Interface);\n  const {\n    send: approveErc20Send,\n    state: approveAndStakeErc20State\n  } = useContractFunction(erc20Contract, \"approve\", {\n    transactionName: \"Approve ERC20 transfer\"\n  });\n  const [maxAnswers, setMaxAnswers] = useState(\"0\");\n  const [deadline, setDeadline] = useState(\"0\");\n\n  const approveAndStake = (totalRewards, maxAnswers, deadline) => {\n    console.log(\"amout to stake\");\n    console.log(totalRewards);\n    setAmountToStake(totalRewards);\n    setMaxAnswers(maxAnswers);\n    setDeadline(deadline);\n    console.log(amountToStake, maxAnswers, deadline);\n    return approveErc20Send(tokenFarmAddress, totalRewards);\n  }; // stake\n\n\n  const {\n    send: stakeSend,\n    state: stakeState\n  } = useContractFunction(tokenFarmContract, \"stake\", {\n    transactionName: \"Stake Tokens\"\n  });\n  const [amountToStake, setAmountToStake] = useState(\"0\"); //useEffect\n\n  useEffect(() => {\n    if (approveAndStakeErc20State.status === \"Success\") {\n      stakeSend(amountToStake, maxAnswers, deadline);\n    }\n  }, [approveAndStakeErc20State, amountToStake]);\n  const [state, setState] = useState(approveAndStakeErc20State);\n  useEffect(() => {\n    if (approveAndStakeErc20State.status === \"Success\") {\n      setState(stakeState);\n    } else {\n      setState(approveAndStakeErc20State);\n    }\n  }, [approveAndStakeErc20State, stakeState]);\n  return {\n    approveAndStake,\n    state\n  };\n};\n\n_s(useStakeTokens, \"eTF4spiZ5EhFWwFXOyKQgf7SfQQ=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"names":["useEffect","useState","useEthers","useContractFunction","constants","utils","networkMapping","ERC20","MainRouter","Contract","useStakeTokens","tokenAddress","abi","chainId","tokenFarmAddress","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","erc20ABI","erc20Interface","erc20Contract","send","approveErc20Send","state","approveAndStakeErc20State","transactionName","maxAnswers","setMaxAnswers","deadline","setDeadline","approveAndStake","totalRewards","console","log","setAmountToStake","amountToStake","stakeSend","stakeState","status","setState"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/src/hooks/useStakeTokens.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nexport const useStakeTokens = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { abi } = MainRouter\n    const { chainId } = useEthers()\n    const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n    const { send: approveErc20Send, state: approveAndStakeErc20State } =\n        useContractFunction(erc20Contract, \"approve\", {\n            transactionName: \"Approve ERC20 transfer\",\n        })\n\n    const [maxAnswers, setMaxAnswers] = useState(\"0\")\n    const [deadline, setDeadline] = useState(\"0\")\n\n    const approveAndStake = (totalRewards: string, maxAnswers: string, deadline: string) => {\n        console.log(\"amout to stake\")\n        console.log(totalRewards)\n        setAmountToStake(totalRewards)\n        setMaxAnswers(maxAnswers)\n        setDeadline(deadline)\n        console.log(amountToStake, maxAnswers, deadline)\n        return approveErc20Send(tokenFarmAddress, totalRewards)\n    }\n\n    // stake\n    const { send: stakeSend, state: stakeState } =\n        useContractFunction(tokenFarmContract, \"stake\", {\n            transactionName: \"Stake Tokens\",\n        })\n\n    const [amountToStake, setAmountToStake] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            stakeSend(amountToStake, maxAnswers, deadline)\n        }\n    }, [approveAndStakeErc20State, amountToStake])\n\n    const [state, setState] = useState(approveAndStakeErc20State)\n\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            setState(stakeState)\n        } else {\n            setState(approveAndStakeErc20State)\n        }\n    }, [approveAndStakeErc20State, stakeState])\n\n\n    return { approveAndStake, state }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}