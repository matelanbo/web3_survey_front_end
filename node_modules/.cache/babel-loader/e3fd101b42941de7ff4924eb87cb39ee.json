{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useCall } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nexport const useTotalQuestions = tokenAddress => {\n  _s();\n\n  var _useCall;\n\n  // address\n  // abi\n  // chainId\n  const {\n    abi\n  } = MainRouter;\n  const {\n    account,\n    chainId\n  } = useEthers();\n  const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface); // Check Rewards\n  //    console.log(\"in\", tokenAddress, tokenFarmAddress)\n\n  const {\n    value: totalQuestions\n  } = (_useCall = useCall({\n    contract: tokenFarmContract,\n    method: ' getNumberOfQuestions',\n    args: []\n  })) !== null && _useCall !== void 0 ? _useCall : {}; //   console.log(rewards)\n\n  return totalQuestions === null || totalQuestions === void 0 ? void 0 : totalQuestions[0];\n};\n\n_s(useTotalQuestions, \"+IjOMno3NgdFWOeqNmTTLPLl/wo=\", false, function () {\n  return [useEthers, useCall];\n});","map":{"version":3,"names":["useEthers","useCall","constants","utils","networkMapping","MainRouter","Contract","useTotalQuestions","tokenAddress","abi","account","chainId","tokenFarmAddress","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","value","totalQuestions","contract","method","args"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/src/hooks/useTotalQuestions.tsx"],"sourcesContent":["import { useEthers, useCall } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport MainRouter from \"../chain-info/contracts/MainRouter.json\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nexport const useTotalQuestions = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { abi } = MainRouter\n    const { account, chainId } = useEthers()\n    const tokenFarmAddress = chainId ? networkMapping[\"4\"][\"MainRouter\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    // Check Rewards\n    //    console.log(\"in\", tokenAddress, tokenFarmAddress)\n    const { value: totalQuestions } =\n        useCall({\n            contract: tokenFarmContract,\n            method: ' getNumberOfQuestions',\n            args: []\n        }) ?? {}\n    //   console.log(rewards)\n    return totalQuestions?.[0]\n\n}"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,eAAnC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,YAAD,IAA0B;EAAA;;EAAA;;EACvD;EACA;EACA;EACA,MAAM;IAAEC;EAAF,IAAUJ,UAAhB;EACA,MAAM;IAAEK,OAAF;IAAWC;EAAX,IAAuBX,SAAS,EAAtC;EACA,MAAMY,gBAAgB,GAAGD,OAAO,GAAGP,cAAc,CAAC,GAAD,CAAd,CAAoB,YAApB,EAAkC,CAAlC,CAAH,GAA0CF,SAAS,CAACW,WAApF;EACA,MAAMC,kBAAkB,GAAG,IAAIX,KAAK,CAACY,SAAV,CAAoBN,GAApB,CAA3B;EACA,MAAMO,iBAAiB,GAAG,IAAIV,QAAJ,CAAaM,gBAAb,EAA+BE,kBAA/B,CAA1B,CARuD,CAUvD;EACA;;EACA,MAAM;IAAEG,KAAK,EAAEC;EAAT,gBACFjB,OAAO,CAAC;IACJkB,QAAQ,EAAEH,iBADN;IAEJI,MAAM,EAAE,uBAFJ;IAGJC,IAAI,EAAE;EAHF,CAAD,CADL,+CAKI,EALV,CAZuD,CAkBvD;;EACA,OAAOH,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAG,CAAH,CAArB;AAEH,CArBM;;GAAMX,iB;UAKoBP,S,EAQzBC,O"},"metadata":{},"sourceType":"module"}