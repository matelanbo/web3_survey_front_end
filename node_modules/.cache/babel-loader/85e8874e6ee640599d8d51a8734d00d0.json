{"ast":null,"code":"import { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\n\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  if (expirationPeriod === 0) {\n    return [];\n  }\n\n  const timeFromCreation = creationTime => Date.now() - creationTime;\n\n  return notifications.filter(notification => timeFromCreation(notification.submittedAt) >= expirationPeriod);\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\n\n\nexport function useNotifications() {\n  const {\n    chainId,\n    account\n  } = useEthers();\n  const {\n    addNotification,\n    notifications,\n    removeNotification\n  } = useNotificationsContext();\n  const {\n    notifications: {\n      checkInterval,\n      expirationPeriod\n    }\n  } = useConfig();\n  const chainNotifications = useMemo(() => {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(() => {\n    if (!chainId) {\n      return;\n    }\n\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n\n    for (const notification of expiredNotification) {\n      removeNotification({\n        notificationId: notification.id,\n        chainId\n      });\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAAuBC,uBAAvB,QAAsD,cAAtD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,UAA1B;;AAEA,SAASC,uBAAT,CAAiCC,aAAjC,EAAgEC,gBAAhE,EAAwF;EACtF,IAAIA,gBAAgB,KAAK,CAAzB,EAA4B;IAC1B,OAAO,EAAP;EACD;;EACD,MAAMC,gBAAgB,GAAIC,YAAD,IAA0BC,IAAI,CAACC,GAAL,KAAaF,YAAhE;;EAEA,OAAOH,aAAa,CAACM,MAAd,CAAsBC,YAAD,IAAkBL,gBAAgB,CAACK,YAAY,CAACC,WAAd,CAAhB,IAA8CP,gBAArF,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,OAAM,SAAUQ,gBAAV,GAA0B;EAC9B,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAuBf,SAAS,EAAtC;EACA,MAAM;IAAEgB,eAAF;IAAmBZ,aAAnB;IAAkCa;EAAlC,IAAyDlB,uBAAuB,EAAtF;EACA,MAAM;IACJK,aAAa,EAAE;MAAEc,aAAF;MAAiBb;IAAjB;EADX,IAEFH,SAAS,EAFb;EAIA,MAAMiB,kBAAkB,GAAGrB,OAAO,CAAC,MAAK;;;IACtC,IAAIgB,OAAO,KAAKM,SAAZ,IAAyB,CAACL,OAA9B,EAAuC;MACrC,OAAO,EAAP;IACD;;IACD,OAAO,mBAAa,CAACD,OAAD,CAAb,MAAsB,IAAtB,IAAsBO,aAAtB,GAAsBA,EAAtB,GAA0B,EAAjC;EACD,CALiC,EAK/B,CAACjB,aAAD,EAAgBU,OAAhB,EAAyBC,OAAzB,CAL+B,CAAlC;EAOAd,WAAW,CAAC,MAAK;IACf,IAAI,CAACa,OAAL,EAAc;MACZ;IACD;;IAED,MAAMQ,mBAAmB,GAAGnB,uBAAuB,CAACgB,kBAAD,EAAqBd,gBAArB,CAAnD;;IACA,KAAK,MAAMM,YAAX,IAA2BW,mBAA3B,EAAgD;MAC9CL,kBAAkB,CAAC;QAAEM,cAAc,EAAEZ,YAAY,CAACa,EAA/B;QAAmCV;MAAnC,CAAD,CAAlB;IACD;EACF,CATU,EASRI,aATQ,CAAX;EAWA,OAAO;IACLd,aAAa,EAAEe,kBADV;IAELH,eAFK;IAGLC;EAHK,CAAP;AAKD","names":["useMemo","useNotificationsContext","useEthers","useInterval","useConfig","getExpiredNotifications","notifications","expirationPeriod","timeFromCreation","creationTime","Date","now","filter","notification","submittedAt","useNotifications","chainId","account","addNotification","removeNotification","checkInterval","chainNotifications","undefined","_a","expiredNotification","notificationId","id"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useNotifications.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { Notification, useNotificationsContext } from '../providers'\nimport { useEthers } from './useEthers'\nimport { useInterval } from './useInterval'\nimport { useConfig } from '../hooks'\n\nfunction getExpiredNotifications(notifications: Notification[], expirationPeriod: number) {\n  if (expirationPeriod === 0) {\n    return []\n  }\n  const timeFromCreation = (creationTime: number) => Date.now() - creationTime\n\n  return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod)\n}\n\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n  const { chainId, account } = useEthers()\n  const { addNotification, notifications, removeNotification } = useNotificationsContext()\n  const {\n    notifications: { checkInterval, expirationPeriod },\n  } = useConfig()\n\n  const chainNotifications = useMemo(() => {\n    if (chainId === undefined || !account) {\n      return []\n    }\n    return notifications[chainId] ?? []\n  }, [notifications, chainId, account])\n\n  useInterval(() => {\n    if (!chainId) {\n      return\n    }\n\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod)\n    for (const notification of expiredNotification) {\n      removeNotification({ notificationId: notification.id, chainId })\n    }\n  }, checkInterval)\n\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}