{"ast":null,"code":"import { useReadonlyNetworks } from '../providers/network';\nimport { useChainId } from './useChainId';\n/**\n * Gets a readonly provider for specific chainId.\n * @param opts.chainId Requested chainId. If not provided, the currently connected wallet's chainId will be used or the default one from the config.\n * @returns An ethers.js provider or undefined.\n * @public\n */\n\nexport function useReadonlyNetwork() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    queryParams: {\n      chainId: opts.chainId\n    }\n  });\n  const providers = useReadonlyNetworks();\n  return providers[chainId] !== undefined && chainId !== undefined ? {\n    provider: providers[chainId],\n    chainId: chainId\n  } : undefined;\n}","map":{"version":3,"mappings":"AACA,SAASA,mBAAT,QAAoC,sBAApC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAYA;;;;;;;AAMA,OAAM,SAAUC,kBAAV,GAAkE;EAAA,IAArCC,IAAqC,uEAAF,EAAE;EACtE,MAAMC,OAAO,GAAGH,UAAU,CAAC;IAAEI,WAAW,EAAE;MAAED,OAAO,EAAED,IAAI,CAACC;IAAhB;EAAf,CAAD,CAA1B;EACA,MAAME,SAAS,GAAGN,mBAAmB,EAArC;EACA,OAAOM,SAAS,CAACF,OAAD,CAAT,KAAkCG,SAAlC,IAA+CH,OAAO,KAAKG,SAA3D,GACH;IACEC,QAAQ,EAAEF,SAAS,CAACF,OAAD,CADrB;IAEEA,OAAO,EAAEA;EAFX,CADG,GAKHG,SALJ;AAMD","names":["useReadonlyNetworks","useChainId","useReadonlyNetwork","opts","chainId","queryParams","providers","undefined","provider"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useReadonlyProvider.tsx"],"sourcesContent":["import { ChainId } from '../constants'\nimport { useReadonlyNetworks } from '../providers/network'\nimport { useChainId } from './useChainId'\nimport type { providers } from 'ethers'\n\nexport interface UseReadonlyProviderOptions {\n  chainId?: number\n}\n\nexport interface ReadonlyNetwork {\n  provider: providers.BaseProvider\n  chainId: number\n}\n\n/**\n * Gets a readonly provider for specific chainId.\n * @param opts.chainId Requested chainId. If not provided, the currently connected wallet's chainId will be used or the default one from the config.\n * @returns An ethers.js provider or undefined.\n * @public\n */\nexport function useReadonlyNetwork(opts: UseReadonlyProviderOptions = {}): ReadonlyNetwork | undefined {\n  const chainId = useChainId({ queryParams: { chainId: opts.chainId } })\n  const providers = useReadonlyNetworks()\n  return providers[chainId as ChainId] !== undefined && chainId !== undefined\n    ? {\n        provider: providers[chainId as ChainId]!,\n        chainId: chainId,\n      }\n    : undefined\n}\n"]},"metadata":{},"sourceType":"module"}