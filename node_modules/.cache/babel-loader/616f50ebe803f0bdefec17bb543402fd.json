{"ast":null,"code":"import { ERC20Interface } from '../constants';\nimport { useCalls } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\n\nexport function useToken(tokenAddress) {\n  var _a, _b;\n\n  const partialCall = tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    address: tokenAddress,\n    args: []\n  };\n  const args = ['name', 'symbol', 'decimals', 'totalSupply'].map(method => partialCall && Object.assign(Object.assign({}, partialCall), {\n    method\n  }));\n  const [name, symbol, decimals, totalSupply] = useCalls(args);\n\n  if (!name && !symbol && !decimals && !totalSupply) {\n    return undefined;\n  }\n\n  return {\n    name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : '',\n    symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : '',\n    decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],\n    totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0]\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA+B,cAA/B;AAGA,SAAeC,QAAf,QAA+B,WAA/B;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,QAAV,CAAmBC,YAAnB,EAA+C;;;EACnD,MAAMC,WAAW,GAAGD,YAAY,IAAI;IAClCE,QAAQ,EAAE,IAAIJ,QAAJ,CAAaE,YAAb,EAA2BJ,cAA3B,CADwB;IAElCO,OAAO,EAAEH,YAFyB;IAGlCI,IAAI,EAAE;EAH4B,CAApC;EAKA,MAAMA,IAAI,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAA+B,aAA/B,EAA8CC,GAA9C,CACVC,MAAD,IAA0BL,WAAW,oCAASA,WAAT,GAAoB;IAAEK;EAAF,CAApB,CAD1B,CAAb;EAGA,MAAM,CAACC,IAAD,EAAOC,MAAP,EAAeC,QAAf,EAAyBC,WAAzB,IAAwCb,QAAQ,CAACO,IAAD,CAAtD;;EAEA,IAAI,CAACG,IAAD,IAAS,CAACC,MAAV,IAAoB,CAACC,QAArB,IAAiC,CAACC,WAAtC,EAAmD;IACjD,OAAOC,SAAP;EACD;;EAED,OAAO;IACLJ,IAAI,EAAE,UAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEK,KAAN,CAAY,CAAZ,OAAc,IAAd,IAAcC,aAAd,GAAcA,EAAd,GAAkB,EADnB;IAELL,MAAM,EAAE,YAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEI,KAAR,CAAc,CAAd,OAAgB,IAAhB,IAAgBE,aAAhB,GAAgBA,EAAhB,GAAoB,EAFvB;IAGLL,QAAQ,EAAEA,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEG,KAAV,CAAgB,CAAhB,CAHL;IAILF,WAAW,EAAEA,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEE,KAAb,CAAmB,CAAnB;EAJR,CAAP;AAMD","names":["ERC20Interface","useCalls","Contract","useToken","tokenAddress","partialCall","contract","address","args","map","method","name","symbol","decimals","totalSupply","undefined","value","_a","_b"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useToken.ts"],"sourcesContent":["import { ERC20Interface } from '../constants'\nimport { Falsy } from '../model/types'\nimport { TokenInfo } from '../model/TokenInfo'\nimport { Call, useCalls } from './useCall'\nimport { Contract } from 'ethers'\n\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\nexport function useToken(tokenAddress: string | Falsy): TokenInfo | undefined {\n  const partialCall = tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    address: tokenAddress,\n    args: [],\n  }\n  const args = ['name', 'symbol', 'decimals', 'totalSupply'].map(\n    (method): Call | Falsy => partialCall && { ...partialCall, method }\n  )\n  const [name, symbol, decimals, totalSupply] = useCalls(args)\n\n  if (!name && !symbol && !decimals && !totalSupply) {\n    return undefined\n  }\n\n  return {\n    name: name?.value[0] ?? '',\n    symbol: symbol?.value[0] ?? '',\n    decimals: decimals?.value[0],\n    totalSupply: totalSupply?.value[0],\n  }\n}\n"]},"metadata":{},"sourceType":"module"}