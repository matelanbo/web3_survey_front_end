{"ast":null,"code":"import { getAddress } from 'ethers/lib/utils';\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useNetwork } from '../providers';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\n\nexport function useEthers() {\n  const {\n    network: {\n      provider: networkProvider,\n      chainId,\n      accounts,\n      errors\n    },\n    deactivate,\n    activate,\n    activateBrowserWallet,\n    isLoading\n  } = useNetwork();\n  const {\n    networks\n  } = useConfig();\n  const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map(network => network.chainId);\n  const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n  const unsupportedChainIdError = new Error(`Unsupported chain id: ${chainId}. Supported chain ids are: ${supportedChainIds}.`);\n  unsupportedChainIdError.name = 'UnsupportedChainIdError';\n  const error = isUnsupportedChainId ? unsupportedChainIdError : errors[errors.length - 1];\n  const readonlyNetwork = useReadonlyNetwork();\n  const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n\n  const switchNetwork = async chainId => {\n    validateArguments({\n      chainId\n    }, {\n      chainId: 'number'\n    });\n\n    if (!provider) {\n      throw new Error('Provider not connected.');\n    }\n\n    try {\n      await provider.send('wallet_switchEthereumChain', [{\n        chainId: `0x${chainId.toString(16)}`\n      }]);\n    } catch (error) {\n      const errChainNotAddedYet = 4902; // Metamask error code\n\n      if (error.code === errChainNotAddedYet) {\n        const chain = networks === null || networks === void 0 ? void 0 : networks.find(chain => chain.chainId === chainId);\n\n        if (chain === null || chain === void 0 ? void 0 : chain.rpcUrl) {\n          await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n        }\n      }\n    }\n  };\n\n  const account = accounts[0] ? getAddress(accounts[0]) : undefined;\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: isUnsupportedChainId ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n    account,\n    active: !!provider,\n    activate: async providerOrConnector => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n        await providerOrConnector.activate();\n        return activate(await providerOrConnector.getProvider());\n      }\n\n      return activate(providerOrConnector);\n    },\n    activateBrowserWallet,\n    deactivate,\n    setError: () => {\n      throw new Error('setError is deprecated');\n    },\n    error,\n    isLoading,\n    switchNetwork\n  };\n}","map":{"version":3,"mappings":"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","names":["getAddress","getAddNetworkParams","validateArguments","useNetwork","useConfig","useReadonlyNetwork","useEthers","network","provider","networkProvider","chainId","accounts","errors","deactivate","activate","activateBrowserWallet","isLoading","networks","supportedChainIds","map","isUnsupportedChainId","indexOf","unsupportedChainIdError","Error","name","error","length","readonlyNetwork","switchNetwork","send","toString","errChainNotAddedYet","code","chain","find","rpcUrl","account","undefined","connector","library","active","providerOrConnector","console","warn","getProvider","setError"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useEthers.ts"],"sourcesContent":["import { providers } from 'ethers'\nimport { getAddress } from 'ethers/lib/utils'\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams'\nimport { validateArguments } from '../helpers/validateArgument'\nimport { useNetwork } from '../providers'\nimport { useConfig } from '../hooks'\nimport { useReadonlyNetwork } from './useReadonlyProvider'\n\ntype JsonRpcProvider = providers.JsonRpcProvider\ntype ExternalProvider = providers.ExternalProvider\n\ntype MaybePromise<T> = Promise<T> | any\n\ntype SupportedProviders =\n  | JsonRpcProvider\n  | ExternalProvider\n  | { getProvider: () => MaybePromise<JsonRpcProvider | ExternalProvider>; activate: () => Promise<any> }\n\n/**\n * @public\n */\nexport type Web3Ethers = {\n  activate: (provider: SupportedProviders) => Promise<void>\n  /**\n   * @deprecated\n   */\n  setError: (error: Error) => void\n  deactivate: () => void\n  connector: undefined\n  chainId?: number\n  account?: string\n  error?: Error\n  library?: JsonRpcProvider\n  active: boolean\n  activateBrowserWallet: () => void\n  isLoading: boolean\n  /**\n   * Switch to a different network.\n   */\n  switchNetwork: (chainId: number) => Promise<void>\n}\n\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n * \n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers(): Web3Ethers {\n  const {\n    network: { provider: networkProvider, chainId, accounts, errors },\n    deactivate,\n    activate,\n    activateBrowserWallet,\n    isLoading,\n  } = useNetwork()\n\n  const { networks } = useConfig()\n  const supportedChainIds = networks?.map((network) => network.chainId)\n  const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0\n  const unsupportedChainIdError = new Error(\n    `Unsupported chain id: ${chainId}. Supported chain ids are: ${supportedChainIds}.`\n  )\n  unsupportedChainIdError.name = 'UnsupportedChainIdError'\n  const error = isUnsupportedChainId ? unsupportedChainIdError : errors[errors.length - 1]\n\n  const readonlyNetwork = useReadonlyNetwork()\n  const provider = networkProvider ?? (readonlyNetwork?.provider as JsonRpcProvider)\n\n  const switchNetwork = async (chainId: number) => {\n    validateArguments({ chainId }, { chainId: 'number' })\n\n    if (!provider) {\n      throw new Error('Provider not connected.')\n    }\n\n    try {\n      await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }])\n    } catch (error: any) {\n      const errChainNotAddedYet = 4902 // Metamask error code\n      if (error.code === errChainNotAddedYet) {\n        const chain = networks?.find((chain) => chain.chainId === chainId)\n        if (chain?.rpcUrl) {\n          await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)])\n        }\n      }\n    }\n  }\n\n  const account = accounts[0] ? getAddress(accounts[0]) : undefined\n\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: isUnsupportedChainId ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork?.chainId,\n    account,\n    active: !!provider,\n    activate: async (providerOrConnector: SupportedProviders) => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.')\n        await providerOrConnector.activate()\n        return activate(await providerOrConnector.getProvider())\n      }\n      return activate(providerOrConnector)\n    },\n    activateBrowserWallet,\n    deactivate,\n\n    setError: () => {\n      throw new Error('setError is deprecated')\n    },\n\n    error,\n    isLoading,\n    switchNetwork,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}