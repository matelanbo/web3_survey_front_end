{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter) {\n  if (!filter) {\n    return;\n  }\n\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n  console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function encodeFilterData(filter, fromBlock, toBlock, blockHash) {\n  if (!filter) {\n    return undefined;\n  }\n\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n\n  if (!contract.address || !event) {\n    warnOnInvalidFilter(filter);\n    return undefined;\n  }\n\n  try {\n    const encodedTopics = contract.interface.encodeFilterTopics(event, args);\n\n    if (blockHash) {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        blockHash: blockHash\n      };\n    } else {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,\n        toBlock: toBlock !== null && toBlock !== void 0 ? toBlock : 'latest'\n      };\n    }\n  } catch (e) {\n    if (e instanceof Error) {\n      return e;\n    } else {\n      warnOnInvalidFilter(filter);\n      return undefined;\n    }\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function decodeLogs(filter, result) {\n  if (!result || !filter) {\n    return undefined;\n  }\n\n  try {\n    if (result instanceof Error) {\n      return {\n        value: undefined,\n        error: result\n      };\n    }\n\n    const decodedLogs = [];\n\n    for (const log of result) {\n      const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics);\n      decodedLogs.push({\n        data,\n        blockNumber: log.blockNumber,\n        blockHash: log.blockHash,\n        transactionIndex: log.transactionIndex,\n        transactionHash: log.transactionHash,\n        removed: log.removed\n      });\n    }\n\n    return {\n      value: decodedLogs,\n      error: undefined\n    };\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error\n    };\n  }\n}","map":{"version":3,"mappings":"AAKA;;;AAGA,OAAM,SAAUA,mBAAV,CAA8BC,MAA9B,EAAyD;EAC7D,IAAI,CAACA,MAAL,EAAa;IACX;EACD;;EACD,MAAM;IAAEC,QAAF;IAAYC,KAAZ;IAAmBC;EAAnB,IAA4BH,MAAlC;EACAI,OAAO,CAACC,IAAR,CAAa,oCAAoCJ,QAAQ,CAACK,OAAO,UAAUJ,KAAK,SAASC,IAAI,EAA7F;AACD;AAED;;;;AAGA,OAAM,SAAUI,gBAAV,CACJP,MADI,EAEJQ,SAFI,EAGJC,OAHI,EAIJC,SAJI,EAIc;EAElB,IAAI,CAACV,MAAL,EAAa;IACX,OAAOW,SAAP;EACD;;EACD,MAAM;IAAEV,QAAF;IAAYC,KAAZ;IAAmBC;EAAnB,IAA4BH,MAAlC;;EACA,IAAI,CAACC,QAAQ,CAACK,OAAV,IAAqB,CAACJ,KAA1B,EAAiC;IAC/BH,mBAAmB,CAACC,MAAD,CAAnB;IACA,OAAOW,SAAP;EACD;;EACD,IAAI;IACF,MAAMC,aAAa,GAAGX,QAAQ,CAACY,SAAT,CAAmBC,kBAAnB,CAAuCZ,KAAvC,EAAiFC,IAAjF,CAAtB;;IAEA,IAAIO,SAAJ,EAAe;MACb,OAAO;QACLJ,OAAO,EAAEL,QAAQ,CAACK,OADb;QAELS,MAAM,EAAEH,aAFH;QAGLF,SAAS,EAAEA;MAHN,CAAP;IAKD,CAND,MAMO;MACL,OAAO;QACLJ,OAAO,EAAEL,QAAQ,CAACK,OADb;QAELS,MAAM,EAAEH,aAFH;QAGLJ,SAAS,EAAEA,SAAS,SAAT,aAAS,WAAT,eAAa,CAHnB;QAILC,OAAO,EAAEA,OAAO,SAAP,WAAO,WAAP,aAAW;MAJf,CAAP;IAMD;EACF,CAjBD,CAiBE,OAAOO,CAAP,EAAU;IACV,IAAIA,CAAC,YAAYC,KAAjB,EAAwB;MACtB,OAAOD,CAAP;IACD,CAFD,MAEO;MACLjB,mBAAmB,CAACC,MAAD,CAAnB;MACA,OAAOW,SAAP;IACD;EACF;AACF;AAUD;;;;AAGA,OAAM,SAAUO,UAAV,CACJlB,MADI,EAEJmB,MAFI,EAEyB;EAE7B,IAAI,CAACA,MAAD,IAAW,CAACnB,MAAhB,EAAwB;IACtB,OAAOW,SAAP;EACD;;EACD,IAAI;IACF,IAAIQ,MAAM,YAAYF,KAAtB,EAA6B;MAC3B,OAAO;QACLG,KAAK,EAAET,SADF;QAELU,KAAK,EAAEF;MAFF,CAAP;IAID;;IAED,MAAMG,WAAW,GAA0C,EAA3D;;IAEA,KAAK,MAAMC,GAAX,IAAkBJ,MAAlB,EAA0B;MACxB,MAAMK,IAAI,GAAGxB,MAAM,CAACC,QAAP,CAAgBY,SAAhB,CAA0BY,cAA1B,CAAyCzB,MAAM,CAACE,KAAhD,EAAuDqB,GAAG,CAACC,IAA3D,EAAiED,GAAG,CAACR,MAArE,CAAb;MAEAO,WAAW,CAACI,IAAZ,CAAiB;QACfF,IADe;QAEfG,WAAW,EAAEJ,GAAG,CAACI,WAFF;QAGfjB,SAAS,EAAEa,GAAG,CAACb,SAHA;QAIfkB,gBAAgB,EAAEL,GAAG,CAACK,gBAJP;QAKfC,eAAe,EAAEN,GAAG,CAACM,eALN;QAMfC,OAAO,EAAEP,GAAG,CAACO;MANE,CAAjB;IAQD;;IAED,OAAO;MACLV,KAAK,EAAEE,WADF;MAELD,KAAK,EAAEV;IAFF,CAAP;EAID,CA3BD,CA2BE,OAAOU,KAAP,EAAc;IACd,OAAO;MACLD,KAAK,EAAET,SADF;MAELU,KAAK,EAAEA;IAFF,CAAP;EAID;AACF","names":["warnOnInvalidFilter","filter","contract","event","args","console","warn","address","encodeFilterData","fromBlock","toBlock","blockHash","undefined","encodedTopics","interface","encodeFilterTopics","topics","e","Error","decodeLogs","result","value","error","decodedLogs","log","data","decodeEventLog","push","blockNumber","transactionIndex","transactionHash","removed"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/helpers/logs.ts"],"sourcesContent":["import { utils } from 'ethers'\nimport type { BlockTag, Filter, FilterByBlockHash, Log } from '@ethersproject/abstract-provider'\nimport { TypedFilter } from '../hooks/useLogs'\nimport { Awaited, ContractEventNames, DetailedEventRecord, EventRecord, Falsy, TypedContract } from '../model/types'\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter: TypedFilter | Falsy) {\n  if (!filter) {\n    return\n  }\n  const { contract, event, args } = filter\n  console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`)\n}\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function encodeFilterData(\n  filter: TypedFilter | Falsy,\n  fromBlock?: BlockTag,\n  toBlock?: BlockTag,\n  blockHash?: string\n): Filter | FilterByBlockHash | Falsy | Error {\n  if (!filter) {\n    return undefined\n  }\n  const { contract, event, args } = filter\n  if (!contract.address || !event) {\n    warnOnInvalidFilter(filter)\n    return undefined\n  }\n  try {\n    const encodedTopics = contract.interface.encodeFilterTopics((event as unknown) as utils.EventFragment, args)\n\n    if (blockHash) {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        blockHash: blockHash,\n      } as FilterByBlockHash\n    } else {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        fromBlock: fromBlock ?? 0,\n        toBlock: toBlock ?? 'latest',\n      } as Filter\n    }\n  } catch (e) {\n    if (e instanceof Error) {\n      return e as Error\n    } else {\n      warnOnInvalidFilter(filter)\n      return undefined\n    }\n  }\n}\n\n/**\n * @public\n */\nexport type LogsResult<T extends TypedContract, EN extends ContractEventNames<T>> =\n  | { value: Awaited<DetailedEventRecord<T, EN>>[]; error: undefined }\n  | { value: undefined; error: Error }\n  | undefined\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeLogs<T extends TypedContract, EN extends ContractEventNames<T>>(\n  filter: TypedFilter | Falsy,\n  result: Log[] | Falsy | Error\n): LogsResult<T, EN> {\n  if (!result || !filter) {\n    return undefined\n  }\n  try {\n    if (result instanceof Error) {\n      return {\n        value: undefined,\n        error: result,\n      }\n    }\n\n    const decodedLogs: Awaited<DetailedEventRecord<T, EN>>[] = []\n\n    for (const log of result) {\n      const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics) as EventRecord<T, EN>\n\n      decodedLogs.push({\n        data,\n        blockNumber: log.blockNumber,\n        blockHash: log.blockHash,\n        transactionIndex: log.transactionIndex,\n        transactionHash: log.transactionHash,\n        removed: log.removed,\n      })\n    }\n\n    return {\n      value: decodedLogs,\n      error: undefined,\n    }\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error as Error,\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}