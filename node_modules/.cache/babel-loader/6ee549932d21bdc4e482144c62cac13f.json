{"ast":null,"code":"import { useMemo } from 'react';\nimport { useRawLogs } from './useRawLogs';\nimport { decodeLogs, encodeFilterData } from '../helpers';\n/**\n * Makes a call to get the logs for a specific contract event and returns the decoded logs or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * A syntax sugar for {@link useRawLogs} that uses ABI, event name, and arguments instead of raw data.\n * @param filter an event filter (see {@link TypedFilter})\n * @param queryParams allows for additional configuration of the query (see {@link LogQueryParams})\n * @returns an array of decoded logs (see {@link LogsResult})\n * @public\n */\n\nexport function useLogs(filter) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    fromBlock,\n    toBlock,\n    blockHash\n  } = queryParams;\n  const rawFilter = useMemo(() => encodeFilterData(filter, fromBlock, toBlock, blockHash), [filter, fromBlock, toBlock, blockHash]);\n  const result = useRawLogs(rawFilter instanceof Error ? undefined : rawFilter, queryParams);\n  return useMemo(() => decodeLogs(filter, rawFilter instanceof Error ? rawFilter : result), [result, filter, rawFilter]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAGA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAAqBC,UAArB,EAAiCC,gBAAjC,QAAyD,YAAzD;AAeA;;;;;;;;;;AASA,OAAM,SAAUC,OAAV,CACJC,MADI,EAE4B;EAAA,IAAhCC,WAAgC,uEAAF,EAAE;EAEhC,MAAM;IAAEC,SAAF;IAAaC,OAAb;IAAsBC;EAAtB,IAAoCH,WAA1C;EAEA,MAAMI,SAAS,GAAGV,OAAO,CAAC,MAAMG,gBAAgB,CAACE,MAAD,EAASE,SAAT,EAAoBC,OAApB,EAA6BC,SAA7B,CAAvB,EAAgE,CACvFJ,MADuF,EAEvFE,SAFuF,EAGvFC,OAHuF,EAIvFC,SAJuF,CAAhE,CAAzB;EAMA,MAAME,MAAM,GAAGV,UAAU,CAACS,SAAS,YAAYE,KAArB,GAA6BC,SAA7B,GAAyCH,SAA1C,EAAqDJ,WAArD,CAAzB;EACA,OAAON,OAAO,CAAC,MAAME,UAAU,CAACG,MAAD,EAASK,SAAS,YAAYE,KAArB,GAA6BF,SAA7B,GAAyCC,MAAlD,CAAjB,EAA4E,CAACA,MAAD,EAASN,MAAT,EAAiBK,SAAjB,CAA5E,CAAd;AACD","names":["useMemo","useRawLogs","decodeLogs","encodeFilterData","useLogs","filter","queryParams","fromBlock","toBlock","blockHash","rawFilter","result","Error","undefined"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/hooks/useLogs.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { Contract } from 'ethers'\nimport { ContractEventNames, Falsy, EventParams, TypedContract } from '../model/types'\nimport { useRawLogs } from './useRawLogs'\nimport { LogsResult, decodeLogs, encodeFilterData } from '../helpers'\nimport { LogQueryParams } from '../constants/type/QueryParams'\n\n/**\n * @public\n */\nexport interface TypedFilter<\n  T extends TypedContract = Contract,\n  EN extends ContractEventNames<T> = ContractEventNames<T>\n> {\n  contract: T\n  event: EN\n  args: EventParams<T, EN>\n}\n\n/**\n * Makes a call to get the logs for a specific contract event and returns the decoded logs or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * A syntax sugar for {@link useRawLogs} that uses ABI, event name, and arguments instead of raw data.\n * @param filter an event filter (see {@link TypedFilter})\n * @param queryParams allows for additional configuration of the query (see {@link LogQueryParams})\n * @returns an array of decoded logs (see {@link LogsResult})\n * @public\n */\nexport function useLogs<T extends TypedContract = Contract, EN extends ContractEventNames<T> = ContractEventNames<T>>(\n  filter: TypedFilter<T, EN> | Falsy,\n  queryParams: LogQueryParams = {}\n): LogsResult<T, EN> {\n  const { fromBlock, toBlock, blockHash } = queryParams\n\n  const rawFilter = useMemo(() => encodeFilterData(filter, fromBlock, toBlock, blockHash), [\n    filter,\n    fromBlock,\n    toBlock,\n    blockHash,\n  ])\n  const result = useRawLogs(rawFilter instanceof Error ? undefined : rawFilter, queryParams)\n  return useMemo(() => decodeLogs(filter, rawFilter instanceof Error ? rawFilter : result), [result, filter, rawFilter])\n}\n"]},"metadata":{},"sourceType":"module"}