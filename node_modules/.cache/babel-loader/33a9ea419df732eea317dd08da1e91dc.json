{"ast":null,"code":"import { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\n\nexport function useSendTransaction(options) {\n  var _a, _b, _c;\n\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const transactionChainId = options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(transactionChainId, options);\n  const config = useConfig();\n  const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n  const providers = useReadonlyNetworks();\n  const provider = transactionChainId && providers[transactionChainId];\n\n  const sendTransaction = async transactionRequest => {\n    const signer = getSignerFromOptions(provider, options, library);\n\n    if (signer) {\n      const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n      return promiseTransaction(signer.sendTransaction(Object.assign(Object.assign({}, transactionRequest), {\n        gasLimit\n      })));\n    }\n  };\n\n  return {\n    sendTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"mappings":"AAEA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,2BAAT,EAAsCC,qBAAtC,QAAmE,yBAAnE;AACA,SAASC,mBAAT,QAAoC,+CAApC;AAEA,SAASC,oBAAT,QAAqC,iCAArC;AAGA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,kBAAV,CAA6BC,OAA7B,EAAyD;;;EAC7D,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAuBR,SAAS,EAAtC;EACA,MAAMS,kBAAkB,GAAIH,OAAO,IAAI,aAAaA,OAAxB,KAAmCA,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEE,OAA5C,CAAD,IAAyDA,OAApF;EACA,MAAM;IAAEE,kBAAF;IAAsBC,KAAtB;IAA6BC;EAA7B,IAA4CV,qBAAqB,CAACO,kBAAD,EAAqBH,OAArB,CAAvE;EAEA,MAAMO,MAAM,GAAGd,SAAS,EAAxB;EACA,MAAMe,wBAAwB,GAC5B,yBAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,wBAAT,MAAiC,IAAjC,IAAiCC,aAAjC,GAAiCA,EAAjC,GAAqCT,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEU,wBAA9C,MAAsE,IAAtE,IAAsEC,aAAtE,GAAsEA,EAAtE,GAA0EJ,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEC,wBAAlF,MAA0G,IAA1G,IAA0GI,aAA1G,GAA0GA,EAA1G,GAA8G,CADhH;EAGA,MAAMC,SAAS,GAAGhB,mBAAmB,EAArC;EACA,MAAMiB,QAAQ,GAAIX,kBAAkB,IAAIU,SAAS,CAACV,kBAAD,CAAjD;;EAEA,MAAMY,eAAe,GAAG,MAAOC,kBAAP,IAAiD;IACvE,MAAMC,MAAM,GAAGnB,oBAAoB,CAACgB,QAAD,EAAqCd,OAArC,EAA8CC,OAA9C,CAAnC;;IAEA,IAAIgB,MAAJ,EAAY;MACV,MAAMC,QAAQ,GAAG,MAAMvB,2BAA2B,CAACqB,kBAAD,EAAqBC,MAArB,EAA6BT,wBAA7B,CAAlD;MAEA,OAAOJ,kBAAkB,CACvBa,MAAM,CAACF,eAAP,CAAsBI,gCACjBH,kBADiB,GACC;QACrBE;MADqB,CADD,CAAtB,CADuB,CAAzB;IAMD;EACF,CAbD;;EAeA,OAAO;IAAEH,eAAF;IAAmBV,KAAnB;IAA0BC;EAA1B,CAAP;AACD","names":["useConfig","useEthers","estimateTransactionGasLimit","usePromiseTransaction","useReadonlyNetworks","getSignerFromOptions","useSendTransaction","options","library","chainId","transactionChainId","promiseTransaction","state","resetState","config","gasLimitBufferPercentage","_a","bufferGasLimitPercentage","_b","_c","providers","provider","sendTransaction","transactionRequest","signer","gasLimit","Object"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/hooks/useSendTransaction.ts"],"sourcesContent":["import type { TransactionRequest } from '@ethersproject/abstract-provider'\nimport { TransactionOptions } from '../model/TransactionOptions'\nimport { useConfig } from './useConfig'\nimport { useEthers } from './useEthers'\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction'\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context'\nimport { ChainId } from '../constants'\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions'\nimport { providers } from 'ethers'\n\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options?: TransactionOptions) {\n  const { library, chainId } = useEthers()\n  const transactionChainId = (options && 'chainId' in options && options?.chainId) || chainId\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options)\n\n  const config = useConfig()\n  const gasLimitBufferPercentage =\n    options?.gasLimitBufferPercentage ?? options?.bufferGasLimitPercentage ?? config?.gasLimitBufferPercentage ?? 0\n\n  const providers = useReadonlyNetworks()\n  const provider = (transactionChainId && providers[transactionChainId as ChainId])!\n\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\n    const signer = getSignerFromOptions(provider as providers.BaseProvider, options, library)\n\n    if (signer) {\n      const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage)\n\n      return promiseTransaction(\n        signer.sendTransaction({\n          ...transactionRequest,\n          gasLimit,\n        })\n      )\n    }\n  }\n\n  return { sendTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}