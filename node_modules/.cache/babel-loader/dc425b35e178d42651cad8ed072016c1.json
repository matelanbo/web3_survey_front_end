{"ast":null,"code":"var _jsxFileName = \"/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/src/Components/yourWallet/StakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Card, Box, CardContent } from \"@material-ui/core\";\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, Tab, CircularProgress } from \"@material-ui/core\";\nimport { useStakeTokens, useRewardsCheck, useAnswer, useClaimRewards, useUpdateQuestions, useTotalQuestions, useUpdateMyRewards, useQuestionsList, useMyAnsweredQuestions, useMyCreatedQuestions } from \"../../hooks\";\nimport { utils } from \"ethers\";\nimport { WalletBalance } from \"./WalletBalance\";\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\";\nimport UpdateIcon from '@mui/icons-material/Update';\nimport SavingsIcon from '@mui/icons-material/Savings';\nimport { CardActions, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const [rewardsToAssign, setRewardsToAssign] = useState('');\n  const [maxAnswers, setMaxAnswers] = useState('');\n  const [deadline, setDeadline] = useState('');\n  const [answerId, setAnswerId] = useState('');\n  const [selectedQuestionTypeIndex, setSelectedQuestionTypeIndex] = useState(0);\n  const questionsType = [{\n    \"index\": 0,\n    \"text\": \"All Questions\"\n  }, {\n    \"index\": 1,\n    \"text\": \"My Answered Questions\"\n  }, {\n    \"index\": 2,\n    \"text\": \"My Posted Questions\"\n  }];\n\n  const handleChange = (event, newValue) => {\n    setSelectedQuestionTypeIndex(parseInt(newValue));\n  }; //   const handleInputChangeDeadline = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //       const deadline = event.target.value === \"\" ? \"\" : Number(event.target.value)\n  //       setDeadline(deadline)\n  //       console.log(deadline)\n  //   }\n\n\n  const {\n    approveAndStake,\n    state: approveAndStakeErc20State\n  } = useStakeTokens(tokenAddress); //  console.log(\"here is rewards to assign:\", rewardsToAssign)\n\n  const handleQuestionnaireCreation = event => {\n    event.preventDefault();\n    console.log(\"here is rewards to assign:\");\n    const rewardsToAssignAsWei = utils.parseEther(rewardsToAssign.toString());\n    console.log(\"here is rewards to assign:\", rewardsToAssignAsWei);\n    return approveAndStake(rewardsToAssignAsWei.toString(), maxAnswers, deadline);\n  };\n\n  const rewards = useRewardsCheck(tokenAddress);\n  const formattedRewards = rewards ? parseFloat(formatUnits(rewards, 18)) : 0;\n  const numberOfQuestions = useTotalQuestions(\"0\"); // const formattedNumberOfQuestions: number = numberOfQuestions ? parseFloat(formatUnits(numberOfQuestions, 18)) : 0\n\n  const {\n    answerQuestions,\n    state: answerState\n  } = useAnswer(\"0\");\n\n  const handleAnswer = id => {\n    console.log(\"Answered question \", id);\n    answerQuestions(id);\n  };\n\n  const {\n    claimRewards,\n    state: claimRewardsState\n  } = useClaimRewards(\"0\");\n\n  const handleClaimRewards = () => {\n    console.log(\"rewards claimed\");\n    claimRewards();\n  };\n\n  const {\n    updateQuestions,\n    state: updateQuestionsState\n  } = useUpdateQuestions(\"0\");\n\n  const handleUpdateQuestions = () => {\n    console.log(\"questions updating...\");\n    updateQuestions();\n  };\n\n  const {\n    updateMyRewards,\n    state: updateMyRewardsState\n  } = useUpdateMyRewards(\"0\");\n\n  const handleUpdateMyRewards = () => {\n    console.log(\"rewards updating...\");\n    updateMyRewards();\n  };\n\n  const isMining = approveAndStakeErc20State.status === \"Mining\" || answerState.status === \"Mining\" || claimRewardsState.status === \"Mining\";\n  const temp = useQuestionsList(\"0\");\n  console.log(temp); //const myAnsweredQuestions = useMyAnsweredQuestions(\"0\")\n\n  const questionsList = temp; //const questionsList = [{ 'id': 0, 'status': 0, 'answered': 11, 'maxAnswers': 20, \"rewards\": 1 }, { 'id': 1, 'status': 0, 'answered': 11, 'maxAnswers': 20, \"rewards\": 1 }, { 'id': 2, 'status': 1, 'answered': 11, 'maxAnswers': 20, \"rewards\": 1 }]\n\n  console.log(\"questionsList out\", questionsList);\n  const activeQuestions = questionsList.map(questions => {\n    if (questions.status === 0) {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        variant: \"outlined\",\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              fontSize: 14\n            },\n            gutterBottom: true,\n            children: [\"Question #\", questions.id, \"   \", questions.answered, \"/\", questions.maxAnswers, \" Total Rewards: \", questions.rewards]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"View\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: () => handleAnswer(questions.id.toString()),\n            color: \"primary\",\n            disabled: isMining,\n            children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 26\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 41\n            }, this) : \"Answer Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this);\n    }\n  });\n  console.log(\"activeQuestions\", activeQuestions);\n  const unactiveQuestions = questionsList.map(questions => {\n    if (questions.status !== 0) {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        variant: \"outlined\",\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              fontSize: 14\n            },\n            gutterBottom: true,\n            children: [\"Question \", questions.id, \" closed status: \", questions.status === 1 ? \"Finished\" : \"Expired\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"View\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this);\n    }\n  });\n  const temp2 = useMyAnsweredQuestions(\"0\");\n  console.log(\"my answered\", temp2);\n  const myAnsweredQuestionsList = temp2;\n  const getMyAnsweredQuestions = myAnsweredQuestionsList.map(questionId => {\n    const question = questionsList[questionId];\n    return /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            fontSize: 14\n          },\n          gutterBottom: true,\n          children: [\"Question #\", question.id, \"   \", question.answered, \"/\", question.maxAnswers, \" Status: \", question.status === 0 ? \"open\" : \"closed\", \" Total Rewards:\", question.rewards]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this);\n  });\n  const temp3 = useMyCreatedQuestions(\"0\");\n  console.log(\"my created\", temp3);\n  const myCreatedQuestionsList = temp3;\n  const getMyCreatedQuestions = myCreatedQuestionsList.map(questionId => {\n    const question = questionsList[questionId];\n    return /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            fontSize: 14\n          },\n          gutterBottom: true,\n          children: [\"Question #\", question.id, \"   \", question.answered, \" / \", question.maxAnswers, \" Status: \", question.status === 0 ? \"open\" : \"closed\", \", Rewards: \", question.rewards]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Download Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this);\n  }); //   console.log(isMining)\n  // console.log(rewardsToAssign, maxAnswers, deadline)\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(WalletBalance, {\n        token: token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleQuestionnaireCreation,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"rewards to assign:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            value: rewardsToAssign,\n            onChange: e => setRewardsToAssign(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Maximun answers to accept:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            required: true,\n            value: maxAnswers,\n            onChange: e => setMaxAnswers(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Deadline:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            required: true,\n            value: deadline,\n            onChange: e => setDeadline(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Creat Questionnaire!!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardContent, {\n          style: {\n            backgroundColor: '#bab4a2'\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              fontSize: 24,\n              fontStyle: 'normal',\n              alignSelf: 'flex-end'\n            },\n            gutterBottom: true,\n            children: [\"Your token rewards:\", formattedRewards]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          style: {\n            backgroundColor: '#bab4a2'\n          },\n          children: formattedRewards === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No Rewards to claim!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              startIcon: /*#__PURE__*/_jsxDEV(SavingsIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 48\n              }, this),\n              variant: \"contained\",\n              onClick: handleClaimRewards,\n              color: \"primary\",\n              size: \"large\",\n              disabled: isMining,\n              children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 26\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 49\n              }, this) : \"Claim Rewards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          startIcon: /*#__PURE__*/_jsxDEV(UpdateIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 36\n          }, this),\n          variant: \"contained\",\n          onClick: handleUpdateQuestions,\n          color: \"secondary\",\n          size: \"large\",\n          disabled: isMining,\n          children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 37\n          }, this) : \"Update questions status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          startIcon: /*#__PURE__*/_jsxDEV(UpdateIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 36\n          }, this),\n          variant: \"outlined\",\n          onClick: handleUpdateMyRewards,\n          color: \"secondary\",\n          size: \"large\",\n          disabled: isMining,\n          children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 37\n          }, this) : \"Update my rewards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(TabContext, {\n          value: selectedQuestionTypeIndex.toString(),\n          children: [/*#__PURE__*/_jsxDEV(TabList, {\n            onChange: handleChange,\n            \"aria-label\": \"questions type tabs\",\n            children: questionsType.map(type => {\n              return /*#__PURE__*/_jsxDEV(Tab, {\n                label: type.text,\n                value: type.index.toString()\n              }, type.index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n            value: \"0\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                textAlign: 'right',\n                fontSize: 22\n              },\n              children: [\"Total number of questions:\", numberOfQuestions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this), activeQuestions, unactiveQuestions]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n            value: \"1\",\n            children: getMyAnsweredQuestions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n            value: \"2\",\n            children: getMyCreatedQuestions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StakeForm, \"nkLp7E1YbA2BWRauC9jLHNLiJUQ=\", false, function () {\n  return [useEthers, useTokenBalance, useStakeTokens, useRewardsCheck, useTotalQuestions, useAnswer, useClaimRewards, useUpdateQuestions, useUpdateMyRewards, useQuestionsList, useMyAnsweredQuestions, useMyCreatedQuestions];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"names":["React","useState","Card","Box","CardContent","useEthers","useTokenBalance","formatUnits","Button","Tab","CircularProgress","useStakeTokens","useRewardsCheck","useAnswer","useClaimRewards","useUpdateQuestions","useTotalQuestions","useUpdateMyRewards","useQuestionsList","useMyAnsweredQuestions","useMyCreatedQuestions","utils","WalletBalance","TabContext","TabList","TabPanel","UpdateIcon","SavingsIcon","CardActions","Typography","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","rewardsToAssign","setRewardsToAssign","maxAnswers","setMaxAnswers","deadline","setDeadline","answerId","setAnswerId","selectedQuestionTypeIndex","setSelectedQuestionTypeIndex","questionsType","handleChange","event","newValue","parseInt","approveAndStake","state","approveAndStakeErc20State","handleQuestionnaireCreation","preventDefault","console","log","rewardsToAssignAsWei","parseEther","toString","rewards","formattedRewards","numberOfQuestions","answerQuestions","answerState","handleAnswer","id","claimRewards","claimRewardsState","handleClaimRewards","updateQuestions","updateQuestionsState","handleUpdateQuestions","updateMyRewards","updateMyRewardsState","handleUpdateMyRewards","isMining","status","temp","questionsList","activeQuestions","map","questions","fontSize","answered","unactiveQuestions","temp2","myAnsweredQuestionsList","getMyAnsweredQuestions","questionId","question","temp3","myCreatedQuestionsList","getMyCreatedQuestions","e","target","value","backgroundColor","fontStyle","alignSelf","type","text","index","textAlign"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/src/Components/yourWallet/StakeForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Card, Box, Divider, CardContent } from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Tab, CircularProgress } from \"@material-ui/core\"\nimport { useStakeTokens, useRewardsCheck, useAnswer, useClaimRewards, useUpdateQuestions, useTotalQuestions, useUpdateMyRewards, useQuestionsList, useMyAnsweredQuestions, useMyCreatedQuestions } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport { WalletBalance } from \"./WalletBalance\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport UpdateIcon from '@mui/icons-material/Update';\nimport SavingsIcon from '@mui/icons-material/Savings';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport { type } from \"os\"\nimport { CardActions, List, Typography } from \"@mui/material\"\n\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({ token }: StakeFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n\n    const [rewardsToAssign, setRewardsToAssign] = useState('')\n    const [maxAnswers, setMaxAnswers] = useState('')\n    const [deadline, setDeadline] = useState('')\n\n    const [answerId, setAnswerId] = useState('')\n\n    const [selectedQuestionTypeIndex, setSelectedQuestionTypeIndex] = useState<number>(0)\n    const questionsType = [{ \"index\": 0, \"text\": \"All Questions\" }, { \"index\": 1, \"text\": \"My Answered Questions\" }, { \"index\": 2, \"text\": \"My Posted Questions\" }]\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        setSelectedQuestionTypeIndex(parseInt(newValue))\n    }\n\n\n\n    //   const handleInputChangeDeadline = (event: React.ChangeEvent<HTMLInputElement>) => {\n    //       const deadline = event.target.value === \"\" ? \"\" : Number(event.target.value)\n    //       setDeadline(deadline)\n    //       console.log(deadline)\n    //   }\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n    //  console.log(\"here is rewards to assign:\", rewardsToAssign)\n    const handleQuestionnaireCreation = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        console.log(\"here is rewards to assign:\")\n        const rewardsToAssignAsWei = utils.parseEther(rewardsToAssign.toString())\n        console.log(\"here is rewards to assign:\", rewardsToAssignAsWei)\n        return approveAndStake(rewardsToAssignAsWei.toString(), maxAnswers, deadline)\n    }\n\n\n\n    const rewards = useRewardsCheck(tokenAddress)\n    const formattedRewards: number = rewards ? parseFloat(formatUnits(rewards, 18)) : 0\n\n    const numberOfQuestions = useTotalQuestions(\"0\")\n    // const formattedNumberOfQuestions: number = numberOfQuestions ? parseFloat(formatUnits(numberOfQuestions, 18)) : 0\n\n    const { answerQuestions, state: answerState } = useAnswer(\"0\")\n    const handleAnswer = (id: string) => {\n        console.log(\"Answered question \", id)\n        answerQuestions(id)\n    }\n\n\n\n    const { claimRewards, state: claimRewardsState } = useClaimRewards(\"0\")\n    const handleClaimRewards = () => {\n        console.log(\"rewards claimed\")\n        claimRewards()\n    }\n\n    const { updateQuestions, state: updateQuestionsState } = useUpdateQuestions(\"0\")\n    const handleUpdateQuestions = () => {\n        console.log(\"questions updating...\")\n        updateQuestions()\n    }\n\n    const { updateMyRewards, state: updateMyRewardsState } = useUpdateMyRewards(\"0\")\n    const handleUpdateMyRewards = () => {\n        console.log(\"rewards updating...\")\n        updateMyRewards()\n    }\n    const isMining = approveAndStakeErc20State.status === \"Mining\" ||\n        answerState.status === \"Mining\" ||\n        claimRewardsState.status === \"Mining\"\n    const temp = useQuestionsList(\"0\")\n    console.log(temp)\n    //const myAnsweredQuestions = useMyAnsweredQuestions(\"0\")\n    const questionsList = temp\n    //const questionsList = [{ 'id': 0, 'status': 0, 'answered': 11, 'maxAnswers': 20, \"rewards\": 1 }, { 'id': 1, 'status': 0, 'answered': 11, 'maxAnswers': 20, \"rewards\": 1 }, { 'id': 2, 'status': 1, 'answered': 11, 'maxAnswers': 20, \"rewards\": 1 }]\n    console.log(\"questionsList out\", questionsList)\n    const activeQuestions = questionsList.map((questions) => {\n        if (questions.status === 0) {\n            return (\n                <Card variant=\"outlined\">\n                    <CardContent>\n                        <Typography sx={{ fontSize: 14 }} gutterBottom>\n                            Question #{questions.id}   {questions.answered}/{questions.maxAnswers} Total Rewards: {questions.rewards}\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        <Button variant=\"contained\" color=\"primary\">View</Button>\n                        <Button\n                            variant=\"contained\"\n                            onClick={() => handleAnswer(questions.id.toString())}\n                            color=\"primary\"\n                            disabled={isMining}>\n                            {isMining ? <CircularProgress size={26} /> : \"Answer Question\"}\n                        </Button>\n                    </CardActions>\n                </Card>\n            )\n        }\n    })\n    console.log(\"activeQuestions\", activeQuestions)\n    const unactiveQuestions = questionsList.map((questions) => {\n        if (questions.status !== 0) {\n            return (\n                <Card variant=\"outlined\">\n                    <CardContent>\n                        <Typography sx={{ fontSize: 14 }} gutterBottom>\n                            Question {questions.id} closed status: {questions.status === 1 ? \"Finished\" : \"Expired\"}\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        <Button variant=\"contained\" color=\"primary\">View</Button>\n                    </CardActions>\n                </Card>\n            )\n        }\n    })\n\n    const temp2 = useMyAnsweredQuestions(\"0\")\n    console.log(\"my answered\", temp2)\n    const myAnsweredQuestionsList = temp2\n    const getMyAnsweredQuestions = myAnsweredQuestionsList.map((questionId: number) => {\n        const question = questionsList[questionId]\n        return (\n            <Card variant=\"outlined\">\n                <CardContent>\n                    <Typography sx={{ fontSize: 14 }} gutterBottom>\n                        Question #{question.id}   {question.answered}/{question.maxAnswers} Status: {question.status === 0 ? \"open\" : \"closed\"} Total Rewards:{question.rewards}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button variant=\"contained\" color=\"primary\">View</Button>\n                </CardActions>\n            </Card>\n        )\n    }\n    )\n    const temp3 = useMyCreatedQuestions(\"0\")\n    console.log(\"my created\", temp3)\n    const myCreatedQuestionsList = temp3\n    const getMyCreatedQuestions = myCreatedQuestionsList.map((questionId: number) => {\n        const question = questionsList[questionId]\n        return (\n            <Card variant=\"outlined\">\n                <CardContent>\n                    <Typography sx={{ fontSize: 14 }} gutterBottom>\n                        Question #{question.id}   {question.answered} / {question.maxAnswers} Status: {question.status === 0 ? \"open\" : \"closed\"}, Rewards: {question.rewards}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button variant=\"contained\" color=\"primary\">View</Button>\n                    <Button variant=\"contained\" color=\"primary\">Download Results</Button>\n                </CardActions>\n            </Card>\n        )\n    }\n    )\n\n    //   console.log(isMining)\n\n    // console.log(rewardsToAssign, maxAnswers, deadline)\n    return (\n        <>\n            <div>\n                <WalletBalance token={token}></WalletBalance>\n                <form onSubmit={handleQuestionnaireCreation}>\n                    <label>\n                        rewards to assign:\n                        <input type=\"text\" required value={rewardsToAssign} onChange={(e) => setRewardsToAssign(e.target.value)}>\n                        </input>\n                    </label>\n                    <label>\n                        Maximun answers to accept:\n                        <input type=\"number\" required value={maxAnswers} onChange={(e) => setMaxAnswers(e.target.value)}>\n                        </input>\n                    </label>\n                    <label>\n                        Deadline:\n                        <input type=\"number\" required value={deadline} onChange={(e) => setDeadline(e.target.value)}>\n                        </input>\n                    </label>\n                    {isMining ? <CircularProgress size={26} /> :\n                        <input type=\"submit\" value=\"Creat Questionnaire!!!\"></input>}\n                </form>\n            </div>\n            <div>\n                <Card>\n                    <CardContent style={{ backgroundColor: '#bab4a2' }}>\n\n                        <Typography sx={{ fontSize: 24, fontStyle: 'normal', alignSelf: 'flex-end' }} gutterBottom>\n                            Your token rewards:{formattedRewards}\n                        </Typography>\n\n                    </CardContent>\n                    <CardActions style={{ backgroundColor: '#bab4a2' }}>\n                        {formattedRewards === 0 ?\n                            <p>No Rewards to claim!</p> :\n                            <div>\n                                <Button\n                                    startIcon={<SavingsIcon></SavingsIcon>}\n                                    variant=\"contained\"\n                                    onClick={handleClaimRewards}\n                                    color=\"primary\"\n                                    size=\"large\"\n                                    disabled={isMining}>\n                                    {isMining ? <CircularProgress size={26} /> : \"Claim Rewards\"}\n                                </Button>\n                            </div>\n                        }\n                    </CardActions>\n                </Card>\n                <div>\n                    <Button\n                        startIcon={<UpdateIcon></UpdateIcon>}\n                        variant=\"contained\"\n                        onClick={handleUpdateQuestions}\n                        color=\"secondary\"\n                        size=\"large\"\n                        disabled={isMining}>\n                        {isMining ? <CircularProgress size={26} /> : \"Update questions status\"}\n                    </Button>\n                </div>\n                <div>\n                    <Button\n                        startIcon={<UpdateIcon></UpdateIcon>}\n                        variant=\"outlined\"\n                        onClick={handleUpdateMyRewards}\n                        color=\"secondary\"\n                        size=\"large\"\n                        disabled={isMining}>\n                        {isMining ? <CircularProgress size={26} /> : \"Update my rewards\"}\n                    </Button>\n                </div>\n            </div>\n            <div>\n                <Box>\n                    <TabContext value={selectedQuestionTypeIndex.toString()}>\n                        <TabList onChange={handleChange} aria-label=\"questions type tabs\">\n                            {questionsType.map((type) => {\n                                return (\n                                    <Tab label={type.text}\n                                        value={type.index.toString()}\n                                        key={type.index}></Tab>\n                                )\n                            })}\n                        </TabList>\n                        <TabPanel value=\"0\">\n                            <Typography sx={{ textAlign: 'right', fontSize: 22 }}>Total number of questions:{numberOfQuestions}</Typography >\n                            {activeQuestions}\n                            {unactiveQuestions}\n                        </TabPanel>\n                        <TabPanel value=\"1\">\n                            {getMyAnsweredQuestions}\n                        </TabPanel>\n                        <TabPanel value=\"2\">\n                            {getMyCreatedQuestions}\n                        </TabPanel>\n                    </TabContext>\n                </Box>\n            </div>\n        </>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,GAAf,EAA6BC,WAA7B,QAAgD,mBAAhD;AAEA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,eAA3C;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,gBAAtB,QAA8C,mBAA9C;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,SAA1C,EAAqDC,eAArD,EAAsEC,kBAAtE,EAA0FC,iBAA1F,EAA6GC,kBAA7G,EAAiIC,gBAAjI,EAAmJC,sBAAnJ,EAA2KC,qBAA3K,QAAwM,aAAxM;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,QAA9B,QAA8C,kBAA9C;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AAIA,SAASC,WAAT,EAA4BC,UAA5B,QAA8C,eAA9C;;;AAOA,OAAO,MAAMC,SAAS,GAAG,QAA+B;EAAA;;EAAA,IAA9B;IAAEC;EAAF,CAA8B;EACpD,MAAM;IAAEC,OAAO,EAAEC,YAAX;IAAyBC;EAAzB,IAAkCH,KAAxC;EACA,MAAM;IAAEI;EAAF,IAAc9B,SAAS,EAA7B;EACA,MAAM+B,YAAY,GAAG9B,eAAe,CAAC2B,YAAD,EAAeE,OAAf,CAApC;EACA,MAAME,qBAA6B,GAAGD,YAAY,GAAGE,UAAU,CAAC/B,WAAW,CAAC6B,YAAD,EAAe,EAAf,CAAZ,CAAb,GAA+C,CAAjG;EAEA,MAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCvC,QAAQ,CAAC,EAAD,CAAtD;EACA,MAAM,CAACwC,UAAD,EAAaC,aAAb,IAA8BzC,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAAC0C,QAAD,EAAWC,WAAX,IAA0B3C,QAAQ,CAAC,EAAD,CAAxC;EAEA,MAAM,CAAC4C,QAAD,EAAWC,WAAX,IAA0B7C,QAAQ,CAAC,EAAD,CAAxC;EAEA,MAAM,CAAC8C,yBAAD,EAA4BC,4BAA5B,IAA4D/C,QAAQ,CAAS,CAAT,CAA1E;EACA,MAAMgD,aAAa,GAAG,CAAC;IAAE,SAAS,CAAX;IAAc,QAAQ;EAAtB,CAAD,EAA0C;IAAE,SAAS,CAAX;IAAc,QAAQ;EAAtB,CAA1C,EAA2F;IAAE,SAAS,CAAX;IAAc,QAAQ;EAAtB,CAA3F,CAAtB;;EACA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAA+BC,QAA/B,KAAoD;IACrEJ,4BAA4B,CAACK,QAAQ,CAACD,QAAD,CAAT,CAA5B;EACH,CAFD,CAdoD,CAoBpD;EACA;EACA;EACA;EACA;;;EAEA,MAAM;IAAEE,eAAF;IAAmBC,KAAK,EAAEC;EAA1B,IAAwD7C,cAAc,CAACsB,YAAD,CAA5E,CA1BoD,CA2BpD;;EACA,MAAMwB,2BAA2B,GAAIN,KAAD,IAA6C;IAC7EA,KAAK,CAACO,cAAN;IACAC,OAAO,CAACC,GAAR,CAAY,4BAAZ;IACA,MAAMC,oBAAoB,GAAGxC,KAAK,CAACyC,UAAN,CAAiBvB,eAAe,CAACwB,QAAhB,EAAjB,CAA7B;IACAJ,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,oBAA1C;IACA,OAAOP,eAAe,CAACO,oBAAoB,CAACE,QAArB,EAAD,EAAkCtB,UAAlC,EAA8CE,QAA9C,CAAtB;EACH,CAND;;EAUA,MAAMqB,OAAO,GAAGpD,eAAe,CAACqB,YAAD,CAA/B;EACA,MAAMgC,gBAAwB,GAAGD,OAAO,GAAG1B,UAAU,CAAC/B,WAAW,CAACyD,OAAD,EAAU,EAAV,CAAZ,CAAb,GAA0C,CAAlF;EAEA,MAAME,iBAAiB,GAAGlD,iBAAiB,CAAC,GAAD,CAA3C,CAzCoD,CA0CpD;;EAEA,MAAM;IAAEmD,eAAF;IAAmBZ,KAAK,EAAEa;EAA1B,IAA0CvD,SAAS,CAAC,GAAD,CAAzD;;EACA,MAAMwD,YAAY,GAAIC,EAAD,IAAgB;IACjCX,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCU,EAAlC;IACAH,eAAe,CAACG,EAAD,CAAf;EACH,CAHD;;EAOA,MAAM;IAAEC,YAAF;IAAgBhB,KAAK,EAAEiB;EAAvB,IAA6C1D,eAAe,CAAC,GAAD,CAAlE;;EACA,MAAM2D,kBAAkB,GAAG,MAAM;IAC7Bd,OAAO,CAACC,GAAR,CAAY,iBAAZ;IACAW,YAAY;EACf,CAHD;;EAKA,MAAM;IAAEG,eAAF;IAAmBnB,KAAK,EAAEoB;EAA1B,IAAmD5D,kBAAkB,CAAC,GAAD,CAA3E;;EACA,MAAM6D,qBAAqB,GAAG,MAAM;IAChCjB,OAAO,CAACC,GAAR,CAAY,uBAAZ;IACAc,eAAe;EAClB,CAHD;;EAKA,MAAM;IAAEG,eAAF;IAAmBtB,KAAK,EAAEuB;EAA1B,IAAmD7D,kBAAkB,CAAC,GAAD,CAA3E;;EACA,MAAM8D,qBAAqB,GAAG,MAAM;IAChCpB,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACAiB,eAAe;EAClB,CAHD;;EAIA,MAAMG,QAAQ,GAAGxB,yBAAyB,CAACyB,MAA1B,KAAqC,QAArC,IACbb,WAAW,CAACa,MAAZ,KAAuB,QADV,IAEbT,iBAAiB,CAACS,MAAlB,KAA6B,QAFjC;EAGA,MAAMC,IAAI,GAAGhE,gBAAgB,CAAC,GAAD,CAA7B;EACAyC,OAAO,CAACC,GAAR,CAAYsB,IAAZ,EAzEoD,CA0EpD;;EACA,MAAMC,aAAa,GAAGD,IAAtB,CA3EoD,CA4EpD;;EACAvB,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCuB,aAAjC;EACA,MAAMC,eAAe,GAAGD,aAAa,CAACE,GAAd,CAAmBC,SAAD,IAAe;IACrD,IAAIA,SAAS,CAACL,MAAV,KAAqB,CAAzB,EAA4B;MACxB,oBACI,QAAC,IAAD;QAAM,OAAO,EAAC,UAAd;QAAA,wBACI,QAAC,WAAD;UAAA,uBACI,QAAC,UAAD;YAAY,EAAE,EAAE;cAAEM,QAAQ,EAAE;YAAZ,CAAhB;YAAkC,YAAY,MAA9C;YAAA,yBACeD,SAAS,CAAChB,EADzB,SACgCgB,SAAS,CAACE,QAD1C,OACqDF,SAAS,CAAC7C,UAD/D,sBAC2F6C,SAAS,CAACtB,OADrG;UAAA;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QADJ,eAMI,QAAC,WAAD;UAAA,wBACI,QAAC,MAAD;YAAQ,OAAO,EAAC,WAAhB;YAA4B,KAAK,EAAC,SAAlC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI,QAAC,MAAD;YACI,OAAO,EAAC,WADZ;YAEI,OAAO,EAAE,MAAMK,YAAY,CAACiB,SAAS,CAAChB,EAAV,CAAaP,QAAb,EAAD,CAF/B;YAGI,KAAK,EAAC,SAHV;YAII,QAAQ,EAAEiB,QAJd;YAAA,UAKKA,QAAQ,gBAAG,QAAC,gBAAD;cAAkB,IAAI,EAAE;YAAxB;cAAA;cAAA;cAAA;YAAA,QAAH,GAAoC;UALjD;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QANJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ;IAmBH;EACJ,CAtBuB,CAAxB;EAuBArB,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BwB,eAA/B;EACA,MAAMK,iBAAiB,GAAGN,aAAa,CAACE,GAAd,CAAmBC,SAAD,IAAe;IACvD,IAAIA,SAAS,CAACL,MAAV,KAAqB,CAAzB,EAA4B;MACxB,oBACI,QAAC,IAAD;QAAM,OAAO,EAAC,UAAd;QAAA,wBACI,QAAC,WAAD;UAAA,uBACI,QAAC,UAAD;YAAY,EAAE,EAAE;cAAEM,QAAQ,EAAE;YAAZ,CAAhB;YAAkC,YAAY,MAA9C;YAAA,wBACcD,SAAS,CAAChB,EADxB,sBAC4CgB,SAAS,CAACL,MAAV,KAAqB,CAArB,GAAyB,UAAzB,GAAsC,SADlF;UAAA;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QADJ,eAMI,QAAC,WAAD;UAAA,uBACI,QAAC,MAAD;YAAQ,OAAO,EAAC,WAAhB;YAA4B,KAAK,EAAC,SAAlC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QANJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ;IAYH;EACJ,CAfyB,CAA1B;EAiBA,MAAMS,KAAK,GAAGvE,sBAAsB,CAAC,GAAD,CAApC;EACAwC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B8B,KAA3B;EACA,MAAMC,uBAAuB,GAAGD,KAAhC;EACA,MAAME,sBAAsB,GAAGD,uBAAuB,CAACN,GAAxB,CAA6BQ,UAAD,IAAwB;IAC/E,MAAMC,QAAQ,GAAGX,aAAa,CAACU,UAAD,CAA9B;IACA,oBACI,QAAC,IAAD;MAAM,OAAO,EAAC,UAAd;MAAA,wBACI,QAAC,WAAD;QAAA,uBACI,QAAC,UAAD;UAAY,EAAE,EAAE;YAAEN,QAAQ,EAAE;UAAZ,CAAhB;UAAkC,YAAY,MAA9C;UAAA,yBACeO,QAAQ,CAACxB,EADxB,SAC+BwB,QAAQ,CAACN,QADxC,OACmDM,QAAQ,CAACrD,UAD5D,eACiFqD,QAAQ,CAACb,MAAT,KAAoB,CAApB,GAAwB,MAAxB,GAAiC,QADlH,qBAC2Ia,QAAQ,CAAC9B,OADpJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAMI,QAAC,WAAD;QAAA,uBACI,QAAC,MAAD;UAAQ,OAAO,EAAC,WAAhB;UAA4B,KAAK,EAAC,SAAlC;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QANJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAYH,CAd8B,CAA/B;EAgBA,MAAM+B,KAAK,GAAG3E,qBAAqB,CAAC,GAAD,CAAnC;EACAuC,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BmC,KAA1B;EACA,MAAMC,sBAAsB,GAAGD,KAA/B;EACA,MAAME,qBAAqB,GAAGD,sBAAsB,CAACX,GAAvB,CAA4BQ,UAAD,IAAwB;IAC7E,MAAMC,QAAQ,GAAGX,aAAa,CAACU,UAAD,CAA9B;IACA,oBACI,QAAC,IAAD;MAAM,OAAO,EAAC,UAAd;MAAA,wBACI,QAAC,WAAD;QAAA,uBACI,QAAC,UAAD;UAAY,EAAE,EAAE;YAAEN,QAAQ,EAAE;UAAZ,CAAhB;UAAkC,YAAY,MAA9C;UAAA,yBACeO,QAAQ,CAACxB,EADxB,SAC+BwB,QAAQ,CAACN,QADxC,SACqDM,QAAQ,CAACrD,UAD9D,eACmFqD,QAAQ,CAACb,MAAT,KAAoB,CAApB,GAAwB,MAAxB,GAAiC,QADpH,iBACyIa,QAAQ,CAAC9B,OADlJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAMI,QAAC,WAAD;QAAA,wBACI,QAAC,MAAD;UAAQ,OAAO,EAAC,WAAhB;UAA4B,KAAK,EAAC,SAAlC;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,MAAD;UAAQ,OAAO,EAAC,WAAhB;UAA4B,KAAK,EAAC,SAAlC;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QANJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAaH,CAf6B,CAA9B,CA7IoD,CA+JpD;EAEA;;EACA,oBACI;IAAA,wBACI;MAAA,wBACI,QAAC,aAAD;QAAe,KAAK,EAAEjC;MAAtB;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAM,QAAQ,EAAE0B,2BAAhB;QAAA,wBACI;UAAA,8CAEI;YAAO,IAAI,EAAC,MAAZ;YAAmB,QAAQ,MAA3B;YAA4B,KAAK,EAAElB,eAAnC;YAAoD,QAAQ,EAAG2D,CAAD,IAAO1D,kBAAkB,CAAC0D,CAAC,CAACC,MAAF,CAASC,KAAV;UAAvF;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAMI;UAAA,sDAEI;YAAO,IAAI,EAAC,QAAZ;YAAqB,QAAQ,MAA7B;YAA8B,KAAK,EAAE3D,UAArC;YAAiD,QAAQ,EAAGyD,CAAD,IAAOxD,aAAa,CAACwD,CAAC,CAACC,MAAF,CAASC,KAAV;UAA/E;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QANJ,eAWI;UAAA,qCAEI;YAAO,IAAI,EAAC,QAAZ;YAAqB,QAAQ,MAA7B;YAA8B,KAAK,EAAEzD,QAArC;YAA+C,QAAQ,EAAGuD,CAAD,IAAOtD,WAAW,CAACsD,CAAC,CAACC,MAAF,CAASC,KAAV;UAA3E;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QAXJ,EAgBKpB,QAAQ,gBAAG,QAAC,gBAAD;UAAkB,IAAI,EAAE;QAAxB;UAAA;UAAA;UAAA;QAAA,QAAH,gBACL;UAAO,IAAI,EAAC,QAAZ;UAAqB,KAAK,EAAC;QAA3B;UAAA;UAAA;UAAA;QAAA,QAjBR;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAuBI;MAAA,wBACI,QAAC,IAAD;QAAA,wBACI,QAAC,WAAD;UAAa,KAAK,EAAE;YAAEqB,eAAe,EAAE;UAAnB,CAApB;UAAA,uBAEI,QAAC,UAAD;YAAY,EAAE,EAAE;cAAEd,QAAQ,EAAE,EAAZ;cAAgBe,SAAS,EAAE,QAA3B;cAAqCC,SAAS,EAAE;YAAhD,CAAhB;YAA8E,YAAY,MAA1F;YAAA,kCACwBtC,gBADxB;UAAA;YAAA;YAAA;YAAA;UAAA;QAFJ;UAAA;UAAA;UAAA;QAAA,QADJ,eAQI,QAAC,WAAD;UAAa,KAAK,EAAE;YAAEoC,eAAe,EAAE;UAAnB,CAApB;UAAA,UACKpC,gBAAgB,KAAK,CAArB,gBACG;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADH,gBAEG;YAAA,uBACI,QAAC,MAAD;cACI,SAAS,eAAE,QAAC,WAAD;gBAAA;gBAAA;gBAAA;cAAA,QADf;cAEI,OAAO,EAAC,WAFZ;cAGI,OAAO,EAAEQ,kBAHb;cAII,KAAK,EAAC,SAJV;cAKI,IAAI,EAAC,OALT;cAMI,QAAQ,EAAEO,QANd;cAAA,UAOKA,QAAQ,gBAAG,QAAC,gBAAD;gBAAkB,IAAI,EAAE;cAAxB;gBAAA;gBAAA;gBAAA;cAAA,QAAH,GAAoC;YAPjD;cAAA;cAAA;cAAA;YAAA;UADJ;YAAA;YAAA;YAAA;UAAA;QAHR;UAAA;UAAA;UAAA;QAAA,QARJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eA0BI;QAAA,uBACI,QAAC,MAAD;UACI,SAAS,eAAE,QAAC,UAAD;YAAA;YAAA;YAAA;UAAA,QADf;UAEI,OAAO,EAAC,WAFZ;UAGI,OAAO,EAAEJ,qBAHb;UAII,KAAK,EAAC,WAJV;UAKI,IAAI,EAAC,OALT;UAMI,QAAQ,EAAEI,QANd;UAAA,UAOKA,QAAQ,gBAAG,QAAC,gBAAD;YAAkB,IAAI,EAAE;UAAxB;YAAA;YAAA;YAAA;UAAA,QAAH,GAAoC;QAPjD;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QA1BJ,eAqCI;QAAA,uBACI,QAAC,MAAD;UACI,SAAS,eAAE,QAAC,UAAD;YAAA;YAAA;YAAA;UAAA,QADf;UAEI,OAAO,EAAC,UAFZ;UAGI,OAAO,EAAED,qBAHb;UAII,KAAK,EAAC,WAJV;UAKI,IAAI,EAAC,OALT;UAMI,QAAQ,EAAEC,QANd;UAAA,UAOKA,QAAQ,gBAAG,QAAC,gBAAD;YAAkB,IAAI,EAAE;UAAxB;YAAA;YAAA;YAAA;UAAA,QAAH,GAAoC;QAPjD;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QArCJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAvBJ,eAwEI;MAAA,uBACI,QAAC,GAAD;QAAA,uBACI,QAAC,UAAD;UAAY,KAAK,EAAEjC,yBAAyB,CAACgB,QAA1B,EAAnB;UAAA,wBACI,QAAC,OAAD;YAAS,QAAQ,EAAEb,YAAnB;YAAiC,cAAW,qBAA5C;YAAA,UACKD,aAAa,CAACoC,GAAd,CAAmBmB,IAAD,IAAU;cACzB,oBACI,QAAC,GAAD;gBAAK,KAAK,EAAEA,IAAI,CAACC,IAAjB;gBACI,KAAK,EAAED,IAAI,CAACE,KAAL,CAAW3C,QAAX;cADX,GAESyC,IAAI,CAACE,KAFd;gBAAA;gBAAA;gBAAA;cAAA,QADJ;YAKH,CANA;UADL;YAAA;YAAA;YAAA;UAAA,QADJ,eAUI,QAAC,QAAD;YAAU,KAAK,EAAC,GAAhB;YAAA,wBACI,QAAC,UAAD;cAAY,EAAE,EAAE;gBAAEC,SAAS,EAAE,OAAb;gBAAsBpB,QAAQ,EAAE;cAAhC,CAAhB;cAAA,yCAAiFrB,iBAAjF;YAAA;cAAA;cAAA;cAAA;YAAA,QADJ,EAEKkB,eAFL,EAGKK,iBAHL;UAAA;YAAA;YAAA;YAAA;UAAA,QAVJ,eAeI,QAAC,QAAD;YAAU,KAAK,EAAC,GAAhB;YAAA,UACKG;UADL;YAAA;YAAA;YAAA;UAAA,QAfJ,eAkBI,QAAC,QAAD;YAAU,KAAK,EAAC,GAAhB;YAAA,UACKK;UADL;YAAA;YAAA;YAAA;UAAA,QAlBJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAxEJ;EAAA,gBADJ;AAqGH,CAvQM;;GAAMnE,S;UAEWzB,S,EACCC,e,EAuByCK,c,EAY9CC,e,EAGUI,iB,EAGsBH,S,EAQGC,e,EAMMC,kB,EAMAE,kB,EAQ5CC,gB,EA+CCC,sB,EAmBAC,qB;;;KA1ILU,S"},"metadata":{},"sourceType":"module"}