{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers, useLocalStorage, useBlockNumber, useConfig } from '../../hooks';\nimport { useNotificationsContext } from '../notifications/context';\nimport { TransactionsContext } from './context';\nimport { DEFAULT_STORED_TRANSACTIONS } from './model';\nimport { transactionReducer } from './reducer';\nexport function TransactionProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const {\n    chainId,\n    library\n  } = useEthers();\n  const blockNumber = useBlockNumber();\n  const {\n    localStorage\n  } = useConfig();\n  const [storage, setStorage] = useLocalStorage(localStorage.transactionPath);\n  const [transactions, dispatch] = useReducer(transactionReducer, storage !== null && storage !== void 0 ? storage : DEFAULT_STORED_TRANSACTIONS);\n  const {\n    addNotification\n  } = useNotificationsContext();\n  useEffect(() => {\n    setStorage(transactions);\n  }, [transactions]);\n  const addTransaction = useCallback(payload => {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload\n    });\n    addNotification({\n      notification: {\n        type: 'transactionStarted',\n        transaction: payload.transaction,\n        submittedAt: payload.submittedAt,\n        transactionName: payload.transactionName\n      },\n      chainId: payload.transaction.chainId\n    });\n  }, [dispatch]);\n  useEffect(() => {\n    const updateTransactions = async () => {\n      var _a;\n\n      if (!chainId || !library || !blockNumber) {\n        return;\n      }\n\n      const checkTransaction = async tx => {\n        if (tx.receipt || !shouldCheck(blockNumber, tx)) {\n          return tx;\n        }\n\n        try {\n          const receipt = await library.getTransactionReceipt(tx.transaction.hash);\n\n          if (receipt) {\n            const type = receipt.status === 0 ? 'transactionFailed' : 'transactionSucceed';\n            addNotification({\n              notification: {\n                type,\n                submittedAt: Date.now(),\n                transaction: tx.transaction,\n                receipt,\n                transactionName: tx.transactionName\n              },\n              chainId\n            });\n            return Object.assign(Object.assign({}, tx), {\n              receipt\n            });\n          } else {\n            return Object.assign(Object.assign({}, tx), {\n              lastCheckedBlockNumber: blockNumber\n            });\n          }\n        } catch (error) {\n          console.error(`failed to check transaction hash: ${tx.transaction.hash}`, error);\n        }\n\n        return tx;\n      };\n\n      const chainTransactions = (_a = transactions[chainId]) !== null && _a !== void 0 ? _a : [];\n      const newTransactions = [];\n\n      for (const tx of chainTransactions) {\n        const newTransaction = await checkTransaction(tx);\n        newTransactions.push(newTransaction);\n      }\n\n      dispatch({\n        type: 'UPDATE_TRANSACTIONS',\n        chainId,\n        transactions: newTransactions\n      });\n    };\n\n    void updateTransactions();\n  }, [chainId, library, blockNumber]);\n  return _jsx(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      addTransaction\n    },\n    children: children\n  });\n}\n\nfunction shouldCheck(blockNumber, tx) {\n  if (tx.receipt) {\n    return false;\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    return true;\n  }\n\n  const blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber;\n\n  if (blocksSinceCheck < 1) {\n    return false;\n  }\n\n  const minutesPending = (Date.now() - tx.submittedAt) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  }\n\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } // otherwise every block\n\n\n  return true;\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useReducer","useEthers","useLocalStorage","useBlockNumber","useConfig","useNotificationsContext","TransactionsContext","DEFAULT_STORED_TRANSACTIONS","transactionReducer","TransactionProvider","children","chainId","library","blockNumber","localStorage","storage","setStorage","transactionPath","transactions","dispatch","addNotification","addTransaction","payload","type","notification","transaction","submittedAt","transactionName","updateTransactions","checkTransaction","tx","receipt","shouldCheck","getTransactionReceipt","hash","status","Date","now","lastCheckedBlockNumber","error","console","chainTransactions","_a","newTransactions","newTransaction","push","_jsx","Provider","value","blocksSinceCheck","minutesPending"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/providers/transactions/provider.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useReducer } from 'react'\nimport { useEthers, useLocalStorage, useBlockNumber, useConfig } from '../../hooks'\nimport { useNotificationsContext } from '../notifications/context'\nimport { TransactionsContext } from './context'\nimport { DEFAULT_STORED_TRANSACTIONS, StoredTransaction } from './model'\nimport { transactionReducer } from './reducer'\n\ninterface Props {\n  children: ReactNode\n}\n\nexport function TransactionProvider({ children }: Props) {\n  const { chainId, library } = useEthers()\n  const blockNumber = useBlockNumber()\n  const { localStorage } = useConfig()\n  const [storage, setStorage] = useLocalStorage(localStorage.transactionPath)\n  const [transactions, dispatch] = useReducer(transactionReducer, storage ?? DEFAULT_STORED_TRANSACTIONS)\n  const { addNotification } = useNotificationsContext()\n\n  useEffect(() => {\n    setStorage(transactions)\n  }, [transactions])\n\n  const addTransaction = useCallback(\n    (payload: StoredTransaction) => {\n      dispatch({\n        type: 'ADD_TRANSACTION',\n        payload,\n      })\n      addNotification({\n        notification: {\n          type: 'transactionStarted',\n          transaction: payload.transaction,\n          submittedAt: payload.submittedAt,\n          transactionName: payload.transactionName,\n        },\n        chainId: payload.transaction.chainId,\n      })\n    },\n    [dispatch]\n  )\n\n  useEffect(() => {\n    const updateTransactions = async () => {\n      if (!chainId || !library || !blockNumber) {\n        return\n      }\n\n      const checkTransaction = async (tx: StoredTransaction) => {\n        if (tx.receipt || !shouldCheck(blockNumber, tx)) {\n          return tx\n        }\n\n        try {\n          const receipt = await library.getTransactionReceipt(tx.transaction.hash)\n          if (receipt) {\n            const type = receipt.status === 0 ? 'transactionFailed' : 'transactionSucceed'\n            addNotification({\n              notification: {\n                type,\n                submittedAt: Date.now(),\n                transaction: tx.transaction,\n                receipt,\n                transactionName: tx.transactionName,\n              },\n              chainId,\n            })\n\n            return { ...tx, receipt }\n          } else {\n            return { ...tx, lastCheckedBlockNumber: blockNumber }\n          }\n        } catch (error) {\n          console.error(`failed to check transaction hash: ${tx.transaction.hash}`, error)\n        }\n\n        return tx\n      }\n\n      const chainTransactions = transactions[chainId] ?? []\n      const newTransactions: StoredTransaction[] = []\n      for (const tx of chainTransactions) {\n        const newTransaction = await checkTransaction(tx)\n        newTransactions.push(newTransaction)\n      }\n\n      dispatch({ type: 'UPDATE_TRANSACTIONS', chainId, transactions: newTransactions })\n    }\n\n    void updateTransactions()\n  }, [chainId, library, blockNumber])\n\n  return <TransactionsContext.Provider value={{ transactions, addTransaction }} children={children} />\n}\n\nfunction shouldCheck(blockNumber: number, tx: StoredTransaction): boolean {\n  if (tx.receipt) {\n    return false\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    return true\n  }\n\n  const blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) {\n    return false\n  }\n\n  const minutesPending = (Date.now() - tx.submittedAt) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  }\n\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  }\n\n  // otherwise every block\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}