{"ast":null,"code":"import { useEffect, useState } from 'react'; // modified from https://usehooks.com/useDebounce/\n\n/**\n * Debounce a value of type T.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n * @param value variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns debounced value\n *\n * @example\n * const [someValue, setValue] = useState(...)\n * const debouncedValue = useDebounce(value, 1000)\n */\n\nexport function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAEA;;AACA;;;;;;;;;;;;;AAYA,OAAM,SAAUC,WAAV,CAAyBC,KAAzB,EAAmCC,KAAnC,EAAgD;EACpD,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAIE,KAAJ,CAApD;EAEAH,SAAS,CAAC,MAAK;IACb;IACA,MAAMO,OAAO,GAAGC,UAAU,CAAC,MAAK;MAC9BF,iBAAiB,CAACH,KAAD,CAAjB;IACD,CAFyB,EAEvBC,KAFuB,CAA1B,CAFa,CAMb;IACA;IACA;;IACA,OAAO,MAAK;MACVK,YAAY,CAACF,OAAD,CAAZ;IACD,CAFD;EAGD,CAZQ,EAYN,CAACJ,KAAD,EAAQC,KAAR,CAZM,CAAT;EAcA,OAAOC,cAAP;AACD","names":["useEffect","useState","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/brownie_fund_me/front_end/node_modules/@usedapp/core/src/hooks/useDebounce.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\n/**\n * Debounce a value of type T.\n * It stores a single value but returns after debounced time unless a new value is assigned before the debounce time elapses, in which case the process restarts.\n * @param value variable to be debounced\n * @param delay debounce time - amount of time in ms.\n * @internal Intended for internal use - use it on your own risk\n * @returns debounced value\n *\n * @example\n * const [someValue, setValue] = useState(...)\n * const debouncedValue = useDebounce(value, 1000)\n */\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n"]},"metadata":{},"sourceType":"module"}