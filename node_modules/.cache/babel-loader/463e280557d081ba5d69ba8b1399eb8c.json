{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { BigNumber } from 'ethers';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\n\nexport function useBlockMeta() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _a, _b;\n\n  const chainId = useChainId({\n    queryParams\n  });\n  const {\n    refresh: configRefresh\n  } = useConfig();\n  const address = useMulticallAddress(queryParams);\n  const refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;\n  const isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === 'never';\n  const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined;\n  const timestamp = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n    chainId,\n    isStatic,\n    refreshPerBlocks\n  });\n  const difficulty = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n    chainId,\n    isStatic,\n    refreshPerBlocks\n  });\n  return {\n    timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,cAA7B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,MAAMC,gCAAgC,GAAGN,YAAY,CAACO,kBAAb,CAAgC,0BAAhC,EAA4D,EAA5D,CAAzC;AACA,MAAMC,iCAAiC,GAAGR,YAAY,CAACO,kBAAb,CAAgC,2BAAhC,EAA6D,EAA7D,CAA1C;AAEA;;;;;AAIA,OAAM,SAAUE,YAAV,GAAoD;EAAA,IAA7BC,WAA6B,uEAAF,EAAE;;;;EACxD,MAAMC,OAAO,GAAGP,UAAU,CAAC;IAAEM;EAAF,CAAD,CAA1B;EACA,MAAM;IAAEE,OAAO,EAAEC;EAAX,IAA6BR,SAAS,EAA5C;EAEA,MAAMS,OAAO,GAAGZ,mBAAmB,CAACQ,WAAD,CAAnC;EACA,MAAME,OAAO,GAAG,iBAAW,CAACA,OAAZ,MAAmB,IAAnB,IAAmBG,aAAnB,GAAmBA,EAAnB,GAAuBF,aAAvC;EACA,MAAMG,QAAQ,GAAG,iBAAW,CAACA,QAAZ,MAAoB,IAApB,IAAoBC,aAApB,GAAoBA,EAApB,GAAwBL,OAAO,KAAK,OAArD;EACA,MAAMM,gBAAgB,GAAG,OAAON,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCO,SAAjE;EACA,MAAMC,SAAS,GAAGjB,UAAU,CAC1BW,OAAO,IACLH,OAAO,KAAKQ,SADd,IAC2B;IACvBL,OADuB;IAEvBO,IAAI,EAAEf,gCAFiB;IAGvBK,OAHuB;IAIvBK,QAJuB;IAKvBE;EALuB,CAFD,CAA5B;EAUA,MAAMI,UAAU,GAAGnB,UAAU,CAC3BW,OAAO,IACLH,OAAO,KAAKQ,SADd,IAC2B;IACvBL,OADuB;IAEvBO,IAAI,EAAEb,iCAFiB;IAGvBG,OAHuB;IAIvBK,QAJuB;IAKvBE;EALuB,CAFA,CAA7B;EAWA,OAAO;IACLE,SAAS,EAAEA,SAAS,KAAKD,SAAd,GAA0B,IAAII,IAAJ,CAAStB,SAAS,CAACuB,IAAV,CAAeJ,SAAS,CAACK,KAAzB,EAAgCC,GAAhC,CAAoC,IAApC,EAA0CC,QAA1C,EAAT,CAA1B,GAA2FR,SADjG;IAELG,UAAU,EAAEA,UAAU,KAAKH,SAAf,GAA2BlB,SAAS,CAACuB,IAAV,CAAeF,UAAU,CAACG,KAA1B,CAA3B,GAA8DN;EAFrE,CAAP;AAID","names":["MultiCallABI","BigNumber","useMulticallAddress","useRawCall","useChainId","useConfig","GET_CURRENT_BLOCK_TIMESTAMP_CALL","encodeFunctionData","GET_CURRENT_BLOCK_DIFFICULTY_CALL","useBlockMeta","queryParams","chainId","refresh","configRefresh","address","_a","isStatic","_b","refreshPerBlocks","undefined","timestamp","data","difficulty","Date","from","value","mul","toNumber"],"sources":["/Users/qianyisheng/Desktop/web3/brownie_test/web3_survey/front_end/node_modules/@usedapp/core/src/hooks/useBlockMeta.ts"],"sourcesContent":["import { MultiCallABI } from '../constants'\nimport { BigNumber } from 'ethers'\nimport { useMulticallAddress } from './useMulticallAddress'\nimport { QueryParams } from '../constants/type/QueryParams'\nimport { useRawCall } from './useRawCalls'\nimport { useChainId } from './useChainId'\nimport { useConfig } from './useConfig'\n\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', [])\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', [])\n\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta(queryParams: QueryParams = {}) {\n  const chainId = useChainId({ queryParams })\n  const { refresh: configRefresh } = useConfig()\n\n  const address = useMulticallAddress(queryParams)\n  const refresh = queryParams.refresh ?? configRefresh\n  const isStatic = queryParams.isStatic ?? refresh === 'never'\n  const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined\n  const timestamp = useRawCall(\n    address &&\n      chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n      }\n  )\n  const difficulty = useRawCall(\n    address &&\n      chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n      }\n  )\n\n  return {\n    timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}